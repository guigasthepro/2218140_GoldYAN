@page "/icompra"
@using GoldYAN.Data
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JsRuntime
@attribute [Authorize(Roles = "Admin, Dev, Contabilidade")]

<div class="container-fluid">
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 style="display: inline" class="m-0 font-weight-bold text-primary">Cabeçalho Compra</h6>
        </div>

        <div class="m-3 form-group ">
            <div class="form-inline">
                <label for="nome" class="">Fornecedor:</label>
                <BlazoredTypeahead class="" DisableClear="true" EnableDropDown="true" SearchMethod="ProcurarFornecedores" oninput="this.value = this.value.toUpperCase()" @bind-Value="fornecedores" Placeholder="Pesquisar fornecedor">
                    <SelectedTemplate>
                        @context.codigo (Desc: @context.nome)
                    </SelectedTemplate>
                    <ResultTemplate> @context.codigo + @context.nome </ResultTemplate>
                </BlazoredTypeahead>
            </div>
        </div>

        <div class="m-3 form-group ">
            <div class="form-inline">
                <label for="nome" class="">Tipo de compra:</label>
                <BlazoredTypeahead class="col-sm-5" DisableClear="true" EnableDropDown="true" SearchMethod="ProcurarCompra" oninput="this.value = this.value.toUpperCase()" @bind-Value="TDC" Placeholder="Pesquisar classificação">
                    <SelectedTemplate>
                        @context.idtipocompra (Desc: @context.descricao)
                    </SelectedTemplate>
                    <ResultTemplate>@context.idtipocompra + @context.descricao </ResultTemplate>
                </BlazoredTypeahead>
            </div>
        </div>

        <EditForm Model="@CCompra">
            <div class="m-3 form-group">
                <div class="form-inline">
                    <label for="numero">Numero:</label> &nbsp
                    <InputText autocomplete="false" oninput="this.value = this.value.toUpperCase()" id="numero" class="form-control" style="-moz-appearance: textfield;" placeholder="Numero Fatura" @bind-Value="CCompra.numero" />
                </div>
            </div>

            <div class="m-3 form-group">
                <div class="form-inline">
                    <label for="apontamento">Apontamentos:</label> &nbsp
                    <InputText autocomplete="false" oninput="this.value = this.value.toUpperCase()" id="Descricao" class="form-control" placeholder="Apontamentos da Compra" @bind-Value="CCompra.apontamentos" />
                </div>
            </div>

            <div class="m-3 form-group">
                <div class="form-inline">
                    <label for="Descricao">Data Transação:</label> &nbsp
                    <InputText autocomplete="false" oninput="this.value = this.value.toUpperCase()" id="Descricao" class="form-control" placeholder="Data de criação" @bind-Value="CCompra.datacriacao" />
                </div>
            </div>
        </EditForm>
    </div>
</div>

<div class="container-fluid">
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 style="display: inline" class="m-0 font-weight-bold text-primary">Cabeçalho Produto</h6><div style="display: inline" class="float-right"><button class="btn btn-primary btn-sm" style="display: inline; margin-right: 5px" @onclick="CriarProdutoNovo">Produto Novo</button><button class="btn btn-success btn-sm" @onclick="UsarProdutoExistente">Produto Existente</button></div>
        </div>

        @if (ProdutoNovo)
        {
            <EditForm Model="@CCP">
                <div class="m-3 form-group">
                    <div class="form-inline">
                        <label for="Descricao">Referencia Fornecedor:</label> &nbsp
                        <InputText autocomplete="false" oninput="this.value = this.value.toUpperCase()" id="Descricao" class="form-control" placeholder="Referencia do Fornecedor" @bind-Value="CCP.referenciafornecedor" />
                    </div>
                </div>

                <div class="m-3 form-group">
                    <div class="form-inline">
                        <label for="Descricao">Descrição:</label> &nbsp
                        <InputText autocomplete="false" oninput="this.value = this.value.toUpperCase()" id="Descricao" class="form-control" placeholder="Descrição do Produto" @bind-Value="CCP.descricao" />
                    </div>
                </div>
            </EditForm>

            <div class="m-3 form-group ">
                <div class="form-inline">
                    <label for="nome" class="">Classificação de Produto:</label>
                    <BlazoredTypeahead class="col-sm-5" DisableClear="true" EnableDropDown="true" SearchMethod="ProcurarClassificação" oninput="this.value = this.value.toUpperCase()" @bind-Value="ecp" Placeholder="Pesquisar classificação">
                        <SelectedTemplate>
                            @context.codigo (Desc: @context.descricao)
                        </SelectedTemplate>
                        <ResultTemplate>@context.codigo + @context.descricao </ResultTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>

            <div class="m-3 form-group ">
                <div class="form-inline">
                    <label for="nome" class="">Tipo de Produto:</label>
                    <BlazoredTypeahead class="col-sm-5" DisableClear="true" EnableDropDown="true" SearchMethod="ProcurarTipoProdutos" oninput="this.value = this.value.toUpperCase()" @bind-Value="dtp" Placeholder="Pesquisar tipo de produto">
                        <SelectedTemplate>
                            @context.codigo (Desc: @context.descricao)
                        </SelectedTemplate>
                        <ResultTemplate>@context.codigo + @context.descricao </ResultTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>

            <div class="m-3 form-group ">
                <div class="form-inline">
                    <label for="nome" class="">Tipo de Peça:</label>
                    <BlazoredTypeahead class="" DisableClear="true" EnableDropDown="true" SearchMethod="ProcurarPecas" oninput="this.value = this.value.toUpperCase()" @bind-Value="dtdp" Placeholder="Pesquisar peça">
                        <SelectedTemplate>
                            @context.codigo (Desc: @context.descricao)
                        </SelectedTemplate>
                        <ResultTemplate> @context.codigo + @context.descricao </ResultTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>

            <EditForm Model="@CCP">
                <div class="m-3 form-group">
                    <div class="form-inline">
                        <label for="Descricao">Peso:</label> &nbsp
                        <InputNumber autocomplete="false" oninput="this.value = this.value.toUpperCase()" style="-moz-appearance: textfield;" id="Descricao" class="form-control" placeholder="Peso do produto" @bind-Value="CCP.peso" />

                        <label for="Descricao">Cotação:</label> &nbsp
                        <InputNumber autocomplete="false" oninput="this.value = this.value.toUpperCase()" style="-moz-appearance: textfield;" id="Descricao" class="form-control" placeholder="Cotação Produto" @bind-Value="CCP.cotacao" />

                        <label for="Descricao">Feitio:</label> &nbsp
                        <InputNumber autocomplete="false" oninput="this.value = this.value.toUpperCase()" style="-moz-appearance: textfield;" id="Descricao" class="form-control" placeholder="Feitio peça" @bind-Value="CCP.feitiopeca" />

                        <label for="Descricao">Quantidade:</label> &nbsp
                        <InputNumber autocomplete="false" oninput="this.value = this.value.toUpperCase()" style="-moz-appearance: textfield;" id="Descricao" class="form-control" placeholder="Quantidade comprada" @bind-Value="CCP.updatestock" />

                        <label for="Descricao">Margem:</label> &nbsp
                        <InputNumber autocomplete="false" oninput="this.value = this.value.toUpperCase()" style="-moz-appearance: textfield;" id="Descricao" class="form-control" placeholder="Quantidade comprada" @bind-Value="CCP.margem" />
                    </div>
                </div>
            </EditForm>
            <div class="m-3 form-group">
                @if (save)
                {
                    <button class="btn btn-primary" @onclick="EditarComposto">Editar</button>

                }
                else
                {
                    <button class="btn btn-primary" @onclick="AdicionarComposto">Adicionar</button>

                }
            </div>
        }
        else
        {

            <div class="m-3 form-group">
                <div class="form-inline">
                    <label for="nome">Produto:</label>
                    <BlazoredTypeahead SearchMethod="ProcurarProdutos" DisableClear="true" EnableDropDown="true" oninput="this.value = this.value.toUpperCase()" @bind-Value="CCP" Placeholder="Pesquisar produto">
                        <SelectedTemplate>
                            @context.idproduto + @context.descricao
                        </SelectedTemplate>
                        <NotFoundTemplate>
                        </NotFoundTemplate>
                        <ResultTemplate>@context.idproduto + @context.descricao</ResultTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>
            <EditForm Model="@CCP">
                <div class="m-3 form-group">
                    <div class="form-inline">
                        <label for="Descricao">Peso:</label> &nbsp
                        <InputNumber autocomplete="false" oninput="this.value = this.value.toUpperCase()" style="-moz-appearance: textfield;" id="Descricao" class="form-control" placeholder="Peso do produto" @bind-Value="CCP.peso" />

                        <label for="Descricao">Cotação:</label> &nbsp
                        <InputNumber autocomplete="false" oninput="this.value = this.value.toUpperCase()" style="-moz-appearance: textfield;" id="Descricao" class="form-control" placeholder="Cotação Produto" @bind-Value="CCP.cotacao" />

                        <label for="Descricao">Feitio:</label> &nbsp
                        <InputNumber autocomplete="false" oninput="this.value = this.value.toUpperCase()" style="-moz-appearance: textfield;" id="Descricao" class="form-control" placeholder="Feitio peça" @bind-Value="CCP.feitiopeca" />

                        <label for="Descricao">Quantidade:</label> &nbsp
                        <InputNumber autocomplete="false" oninput="this.value = this.value.toUpperCase()" style="-moz-appearance: textfield;" id="Descricao" class="form-control" placeholder="Quantidade comprada" @bind-Value="CCP.updatestock" />

                        <label for="Descricao">Margem:</label> &nbsp
                        <InputNumber autocomplete="false" oninput="this.value = this.value.toUpperCase()" style="-moz-appearance: textfield;" id="Descricao" class="form-control" placeholder="Margem Produto" @bind-Value="CCP.margem" />
                    </div>
                </div>
            </EditForm>


            <div class="m-3 form-group">
                @if (save)
                {
                    <button class="btn btn-primary" @onclick="EditarComposto">Editar</button>

                }
                else
                {
                    <button class="btn btn-primary" @onclick="AdicionarComposto">Adicionar</button>

                }
            </div>
        }
    </div>
</div>

<div class="container-fluid">

    <!-- DataTales Example -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Lista de Produtos</h6>
        </div>
        <div class="card-body">
            <div class="table-responsive-sm">
                <div id="dataTable_wrapper" class="dataTables_wrapper dt-bootstrap4">
                    <div class="row"><div class="col-sm-12 col-md-6"><div class="dataTables_length" id="dataTable_length"><label>Show <select name="dataTable_length" aria-controls="dataTable" class="custom-select custom-select-sm form-control form-control-sm"><option value="10">10</option><option value="25">25</option><option value="50">50</option><option value="100">100</option></select> entries</label></div></div><div class="col-sm-12 col-md-6"><div id="dataTable_filter" class="dataTables_filter"><label>Search:<input type="search" class="form-control form-control-sm" placeholder="" aria-controls="dataTable"></label></div></div></div><div class="row">
                        <div class="col-sm-12">
                            <table class="table table-bordered table-sm dataTable" id="dataTable" width="100%" cellspacing="0" role="grid" aria-describedby="dataTable_info" style="width: 100%;">
                                <thead>
                                    <tr role="row"><th class="sorting_asc" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-sort="ascending" aria-label="Name: activate to sort column descending" style="width: 101px;">IdProduto</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Position: activate to sort column ascending" style="width: 170px;">IDFornecedor</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Office: activate to sort column ascending" style="width: 71px;">Descrição</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Age: activate to sort column ascending" style="width: 31px;">Stock</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Start date: activate to sort column ascending" style="width: 68px;">Peso</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Position: activate to sort column ascending" style="width: 170px;">Cotação</th><th class="sorting_asc" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-sort="ascending" aria-label="Name: activate to sort column descending" style="width: 101px;">Preco</th><th class="sorting_asc" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-sort="ascending" aria-label="Name: activate to sort column descending" style="width: 101px;">Preço Total</th><th class="sorting_asc" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-sort="ascending" aria-label="Name: activate to sort column descending" style="width: 101px;">PVP</th><th class="sorting_asc" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-sort="ascending" aria-label="Name: activate to sort column descending" style="width: 101px;">Ações</th></tr>
                                </thead>
                                <tfoot>
                                    <tr><th rowspan="1" colspan="1">IdProduto</th><th rowspan="1" colspan="1">IDFornecedor</th><th rowspan="1" colspan="1">Descrição</th><th rowspan="1" colspan="1">Stock</th><th rowspan="1" colspan="1">Peso</th><th rowspan="1" colspan="1">Cotação</th><th rowspan="1" colspan="1">Preco</th><th rowspan="1" colspan="1">Preço Total</th><th rowspan="1" colspan="1">PVP</th><th rowspan="1" colspan="1">Ações</th></tr>
                                </tfoot>
                                <tbody>
                                    @for (int i = 0; i < LCP.Count; i++)
                                    {
                                        if (!IsVisible(LCP[i]))
                                            continue;
                                        <tr style="height: 1em;">
                                            <td class="sorting_1" style=" overflow: hidden; white-space: nowrap; " title="@LCP[i].idproduto">@LCP[i].idproduto</td>
                                            <td style=" overflow: hidden; white-space: nowrap; " title="@LCP[i].idfornecedor">@LCP[i].idfornecedor</td>
                                            <td style=" overflow: hidden; white-space: nowrap; " title="@LCP[i].descricao">@LCP[i].descricao</td>
                                            <td style=" overflow: hidden; white-space: nowrap; " title="@LCP[i].updatestock">@LCP[i].updatestock</td>
                                            <td style=" overflow: hidden; white-space: nowrap; " title="@LCP[i].peso">@LCP[i].peso</td>
                                            <td style=" overflow: hidden; white-space: nowrap; " title="@LCP[i].cotacao">@LCP[i].cotacao</td>
                                            <td style=" overflow: hidden; white-space: nowrap; " title="@LCP[i].preco">@LCP[i].preco</td>
                                            <td style=" overflow: hidden; white-space: nowrap; " title="@LCP[i].custototal">@LCP[i].custototal</td>
                                            <td style=" overflow: hidden; white-space: nowrap; " title="@LCP[i].pvp">@LCP[i].pvp</td>

                                            <td><button @onclick="() => OpenFichaProduto(LCP[i - 1 ].idproduto,LCP[i - 1].linha)" class="btn btn-primary btn-sm" style="margin-left: 1rem"><i class="fas fa-pen"></i></button><button @onclick="() => Apagar(LCP[i].linha)" class="btn btn-danger btn-sm" style="margin-left: 0.3rem"><i class="fas fa-trash"></i></button></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="m-3 form-group">
            <button class="btn btn-primary" @onclick="CriarProduto">Inserir compra</button>
        </div>

    </div>
</div>






@code {

    //Declaration of needed objects
    Data.CabecalhoProdutos CCP = new CabecalhoProdutos();
    Data.Colaboradores cl = new Colaboradores();
    Data.TipoDePeca dtdp = new TipoDePeca();
    Data.TipoProduto dtp = new TipoProduto();
    Data.Fornecedores fornecedores = new Data.Fornecedores();
    Data.ClassificacaoProdutos ecp = new Data.ClassificacaoProdutos();
    Data.CabecalhoCompras CCompra = new Data.CabecalhoCompras();
    Data.Compras Compra = new Data.Compras();
    Data.IDMaximo IDMaximo = new Data.IDMaximo();
    Data.HistoricoStock hStock = new Data.HistoricoStock();
    Data.TipodeCompra TDC = new TipodeCompra();





    // Declaration of needed lists
    List<Unidades> listaUnidades = new List<Unidades>();
    List<ClassificacaoProdutos> listaClassificacaoProdutos = new List<ClassificacaoProdutos>();
    List<Fornecedores> listaFornecedores = new List<Fornecedores>();
    List<TipoDePeca> listaTipoDePecas = new List<TipoDePeca>();
    List<TipoProduto> listaTipoProdutos = new List<TipoProduto>();
    List<Colaboradores> colaboradores = new List<Colaboradores>();
    List<CabecalhoProdutos> listaCabecalhoProduto = new List<CabecalhoProdutos>();
    List<TipodeCompra> LTDC = new List<TipodeCompra>();







    //For input values
    List<Data.CabecalhoProdutos> LCP = new List<CabecalhoProdutos>();
    List<Data.Compras> LC = new List<Data.Compras>();








    // General variables
    bool Readonly = false;
    int i;
    string formadepesquisa;
    bool ProdutoNovo = true;
    bool save = false;
    public string Filter { get; set; }
    public int linhaselecionada { get; set; }
    public double custototalsomado { get; set; }









    // Function that always runs when someone enter in the page
    protected override async Task OnInitializedAsync()
    {

        // Values that the program search in database
        listaFornecedores = FC.GetAll();
        listaClassificacaoProdutos = CPC.GetAll();
        listaUnidades = UC.GetAll();
        listaTipoDePecas = TPC.GetAll();
        listaTipoProdutos = TPRC.GetAll();
        listaCabecalhoProduto = CAPC.GetAll();
        colaboradores = colaboradoresController.GetAll();
        LTDC = TCC.GetAll();
        // Initial Values in CFabrico Page


        var res = CAPC.GetMaxID();
        JsRuntime.InvokeVoidAsync("console.log", res);
        CCompra.datacriacao = DateTime.Now.ToShortDateString();

    }


    public async Task Apagar(int id)
    {
        LCP.RemoveAt(id);
        LC.RemoveAt(id);
    }



    public bool IsVisible(CabecalhoProdutos produtos)
    {
        if (string.IsNullOrEmpty(Filter))
            return true;

        if (produtos.idproduto.Equals(Filter) || produtos.descricao.ToString().Contains(Filter) || produtos.apontamentos.ToString().Contains(Filter))
            return true;

        return false;
    }


    public async Task OpenFichaProduto(int idproduto, int linha)
    {
        linhaselecionada = linha;
        if (ProdutoNovo)
        {
            CCP = LCP[linha - 1];
            dtp = TPRC.Get(CCP.idtipodeproduto);
            dtdp = TPC.Get(CCP.idtipodepeca);
            ecp = CPC.Get(CCP.idclassificação);

        }
        else
        {
            CCP = LCP[linha - 1];

        }
        save = true;
    }




    public async Task AdicionarComposto()
    {
        if (ProdutoNovo)
        {
            i++;
            CCP.produtonovo = true;
            if (ecp != null)
            {
                CCP.idclassificação = ecp.IDClassificacao;
            }
            if (dtp != null)
            {
                CCP.idtipodeproduto = dtp.idtipoproduto;
            }
            if (dtdp != null)
            {
                CCP.idtipodepeca = dtdp.idpeca;
            }

            CCP.stockantigo = 0;


            if (CCP.updatestock.HasValue)
            {
                CCP.stocktotal = CCP.stock.GetValueOrDefault() + CCP.updatestock.Value;
                Compra.quantidade = CCP.updatestock.GetValueOrDefault();
            }
            else if (CCP.peso.HasValue)
            {
                CCP.stocktotal = CCP.stock.GetValueOrDefault() + CCP.peso.Value;
            }
            else
            {
                js.InvokeVoidAsync("alert", "Impossivel adicionar stock ao produto, o produto foi composto sem stock!");

            }

            if (CCP.stocktotal.HasValue)
            {
                CCP.stock = CCP.stocktotal.Value;
            }

            CCP.linha = i;
            Compra.idproduto = CCP.idproduto;
            Compra.linha = i;
            if (CCP.peso.HasValue && CCP.cotacao.HasValue && CCP.updatestock.HasValue)
            {
                CCP.preco = (CCP.peso.Value * CCP.cotacao.Value) + CCP.feitiopeca;
                CCP.custototal = CCP.preco * CCP.updatestock;

            }
            else if (CCP.peso.HasValue && CCP.cotacao.HasValue && !CCP.updatestock.HasValue)
            {
                CCP.preco = (CCP.peso.Value * CCP.cotacao.Value) + CCP.feitiopeca;
                CCP.custototal = CCP.preco;
            }
            else if (CCP.updatestock.HasValue)
            {
                CCP.preco = CCP.feitiopeca;
                CCP.custototal = CCP.preco * CCP.updatestock;
            }
            else
            {
                js.InvokeVoidAsync("alert", "Impossivel fazer o preço, o produto foi adicionado sem preço");
            }
            CCP.custototal = CCP.preco * CCP.updatestock;
            custototalsomado = custototalsomado + CCP.custototal.Value;

            if (CCP.preco.HasValue)
            {
                Compra.preco = CCP.preco.Value;
                if (CCP.margem.HasValue)
                {
                    CCP.preco = CCP.preco * CCP.margem;
                    CCP.pvp = CCP.preco * 1.23;
                }
                else
                {
                    CCP.pvp = CCP.preco * 1.23;
                }
            }

            LCP.Add(CCP);
            LC.Add(Compra);

            ecp = new ClassificacaoProdutos();
            dtp = new TipoProduto();
            dtdp = new TipoDePeca();
            Compra = new Compras();
            CCP = new CabecalhoProdutos();

        }
        else
        {
            i++;
            CCP.produtonovo = false;
            CCP.idclassificação = ecp.IDClassificacao;
            CCP.idtipodeproduto = dtp.idtipoproduto;
            CCP.idtipodepeca = dtdp.idpeca;

            if (CCP.stock.HasValue)
            {
                CCP.stockantigo = CCP.stock.GetValueOrDefault();
            }

            if (CCP.updatestock.HasValue)
            {
                CCP.stocktotal = CCP.stock.GetValueOrDefault() + CCP.updatestock.Value;
                Compra.quantidade = CCP.updatestock.GetValueOrDefault();
            }
            else if (CCP.peso.HasValue)
            {
                CCP.stocktotal = CCP.stock.GetValueOrDefault() + CCP.peso.Value;
            }
            else
            {
                js.InvokeVoidAsync("alert", "Impossivel adicionar stock ao produto, o produto foi composto sem stock!");

            }

            if (CCP.stocktotal.HasValue)
            {
                CCP.stock = CCP.stocktotal.Value;
            }

            CCP.linha = i;
            Compra.idproduto = CCP.idproduto;
            Compra.linha = i;
            if (CCP.peso.HasValue && CCP.cotacao.HasValue && CCP.updatestock.HasValue)
            {
                CCP.preco = (CCP.peso.Value * CCP.cotacao.Value) + CCP.feitiopeca;
                CCP.custototal = CCP.preco * CCP.updatestock;

            }
            else if (CCP.peso.HasValue && CCP.cotacao.HasValue && !CCP.updatestock.HasValue)
            {
                CCP.preco = (CCP.peso.Value * CCP.cotacao.Value) + CCP.feitiopeca;
                CCP.custototal = CCP.preco;
            }
            else if (CCP.updatestock.HasValue)
            {
                CCP.preco = CCP.feitiopeca;
                CCP.custototal = CCP.preco * CCP.updatestock;
            }
            else
            {
                js.InvokeVoidAsync("alert", "Impossivel fazer o preço, o produto foi adicionado sem preço");
            }
            CCP.custototal = CCP.preco * CCP.updatestock;
            custototalsomado = custototalsomado + CCP.custototal.Value;

            if (CCP.preco.HasValue)
            {
                Compra.preco = CCP.preco.Value;
                if (CCP.margem.HasValue)
                {
                    CCP.preco = CCP.preco * CCP.margem;
                    CCP.pvp = CCP.preco * 1.23;
                }
                else
                {
                    CCP.pvp = CCP.preco * 1.23;
                }
            }

            LCP.Add(CCP);
            LC.Add(Compra);

            ecp = new ClassificacaoProdutos();
            dtp = new TipoProduto();
            dtdp = new TipoDePeca();
            Compra = new Compras();
            CCP = new CabecalhoProdutos();

        }
    }


    public async Task EditarComposto()
    {
        CCP = LCP[linhaselecionada - 1];
        Compra = LC[linhaselecionada - 1];
        i++;
        if (ecp != null)
        {
            CCP.idclassificação = ecp.IDClassificacao;
        }
        if (dtp != null)
        {
            CCP.idtipodeproduto = dtp.idtipoproduto;
        }
        if (dtdp != null)
        {
            CCP.idtipodepeca = dtdp.idpeca;
        }
        if (CCP.updatestock.HasValue)
        {
            Compra.quantidade = CCP.updatestock.GetValueOrDefault();
            CCP.stockantigo = CCP.stock.GetValueOrDefault();
        }

        if (LCP[linhaselecionada - 1].updatestock.HasValue)
        {
            hStock.stockadicionado = LCP[linhaselecionada - 1].updatestock.Value;
        }


        if (!CCP.produtonovo)
        {
            hStock.idprodutoalterado = CCP.idproduto;
        }
        hStock.stockfinal = LCP[linhaselecionada - 1].stock;

        hStock.datacriacao = DateTime.Now.ToShortDateString();

        if (CCP.updatestock.HasValue)
        {
            CCP.stocktotal = CCP.stock.GetValueOrDefault() + CCP.updatestock.Value;
        }
        else if (CCP.peso.HasValue)
        {
            CCP.stocktotal = CCP.stock.GetValueOrDefault() + CCP.peso.Value;
        }
        else
        {
            js.InvokeVoidAsync("alert", "Impossivel adicionar stock ao produto, o produto foi composto sem stock!");

        }

        if (CCP.stocktotal.HasValue)
        {
            CCP.stock = CCP.stocktotal.Value;
        }

        Compra.idproduto = CCP.idproduto;

        if (CCP.peso.HasValue && CCP.cotacao.HasValue && CCP.updatestock.HasValue)
        {
            CCP.preco = (CCP.peso.Value * CCP.cotacao.Value) + CCP.feitiopeca;
            CCP.custototal = CCP.preco * CCP.updatestock;

        }
        else if (CCP.peso.HasValue && CCP.cotacao.HasValue && !CCP.updatestock.HasValue)
        {
            CCP.preco = (CCP.peso.Value * CCP.cotacao.Value) + CCP.feitiopeca;
            CCP.custototal = CCP.preco;
        }
        else if (CCP.updatestock.HasValue)
        {
            CCP.preco = CCP.feitiopeca;
            CCP.custototal = CCP.preco * CCP.updatestock;
        }
        else
        {
            js.InvokeVoidAsync("alert", "Impossivel fazer o preço, o produto foi adicionado sem preço");
        }
        CCP.custototal = CCP.preco * CCP.updatestock;
        custototalsomado = custototalsomado + CCP.custototal.Value;

        if (CCP.preco.HasValue)
        {
            Compra.preco = CCP.preco.Value;
            if (CCP.margem.HasValue)
            {
                CCP.preco = CCP.preco * CCP.margem;
                CCP.pvp = CCP.preco * 1.23;
            }
            else
            {
                CCP.pvp = CCP.preco * 1.23;
            }
        }

        custototalsomado = custototalsomado - LCP[linhaselecionada - 1].custototal.Value;
        LCP.RemoveAt(linhaselecionada - 1);
        LCP.Insert(linhaselecionada - 1, CCP);

        custototalsomado = custototalsomado + CCP.custototal.Value;
        LC.RemoveAt(linhaselecionada - 1);
        LC.Insert(linhaselecionada - 1, Compra);

        ecp = new ClassificacaoProdutos();
        dtp = new TipoProduto();
        dtdp = new TipoDePeca();
        Compra = new Compras();
        CCP = new CabecalhoProdutos();
        save = false;
    }




    // Function that creates the product if new and creates also the cabecalhofabrico and fabrico
    public async Task CriarProduto()
    {
        if (LCP.Count != 0)
        {


            CCompra.idfornecedor = fornecedores.idfornecedor;
            CCompra.idtipodecompra = TDC.idtipocompra;
            var resultado = CComprasC.Post(CCompra);

            if (LCP.Count > 1)
            {
                for (int i = 0; i < LCP.Count; i++)
                {
                    if (LCP[i].produtonovo)
                    {
                        hStock.tipocomponente = "Compra";
                        hStock.idcomponente = CCompra.numero;
                        hStock.tipo = "Entrada";
                        hStock.stockinicial = 0;
                        if (LCP[i].updatestock.HasValue)
                        {
                            hStock.stockadicionado = LCP[i].updatestock.Value;
                        }
                        hStock.stockfinal = LCP[i].stock;
                        hStock.datacriacao = DateTime.Now.ToString("dd/MM/yyyy");
                        var resutlacompra = CAPC.Post(LCP[i]);
                        hStock.idprodutoalterado = resutlacompra.idproduto;

                        LC[i].idcompra = resultado.idcompra;
                        LC[i].idproduto = resutlacompra.idproduto;

                        var resultado7 = ComprasC.Post(LC[i]);
                        hStockC.Post(hStock);

                        //if (resutlacompra.idproduto != 0 && resultado7.idcompra != 0)
                        //{
                        //    js.InvokeVoidAsync("alert", "Compra inserida com sucesso");
                        //}
                        //else
                        //{
                        //    js.InvokeVoidAsync("alert", "Compra inserida sem sucesso");
                        //}

                        //hStock = new HistoricoStock();
                        //ecp = new ClassificacaoProdutos();
                        //dtp = new TipoProduto();
                        //dtdp = new TipoDePeca();
                        //Compra = new Compras();
                        //CCP = new CabecalhoProdutos();
                        //LCP = new List<CabecalhoProdutos>();


                    }
                    else
                    {
                        hStock.idprodutoalterado = LCP[i].idproduto;
                        hStock.tipocomponente = "Compra";
                        hStock.idcomponente = CCompra.numero;
                        hStock.tipo = "Entrada";
                        if (LCP[i].updatestock.HasValue)
                        {
                            hStock.stockinicial = LCP[i].stockantigo.Value;
                        }
                        if (LCP[i].updatestock.HasValue)
                        {
                            hStock.stockadicionado = LCP[i].updatestock.Value;
                        }
                        js.InvokeVoidAsync("console.log", $"{LCP[i].stock.Value}");

                        hStock.stockfinal = LCP[i].stock;
                        hStock.datacriacao = DateTime.Now.ToString("dd/MM/yyyy");

                        var resultado6 = CAPC.Put(LCP[i].idproduto, LCP[i]);

                        LC[i].idcompra = resultado.idcompra;
                        var resultado7 = ComprasC.Post(LC[i]);
                        hStockC.Post(hStock);
                        //if (resultado7.idcompra != 0)
                        //{
                        //    js.InvokeVoidAsync("alert", "Compra inserida com sucesso");
                        //}
                        //else
                        //{
                        //    js.InvokeVoidAsync("alert", "Compra inserida sem sucesso");
                        //}
                        //hStock = new HistoricoStock();
                        //ecp = new ClassificacaoProdutos();
                        //dtp = new TipoProduto();
                        //dtdp = new TipoDePeca();
                        //Compra = new Compras();
                        //CCP = new CabecalhoProdutos();
                        //LCP = new List<CabecalhoProdutos>();




                    }



                }





            }
            else
            {
                CCompra.idfornecedor = fornecedores.idfornecedor;

                var resultado2 = CComprasC.Post(CCompra);

                if (LCP[0].produtonovo)
                {
                    hStock.tipocomponente = "Compra";
                    hStock.idcomponente = CCompra.numero;
                    hStock.tipo = "Entrada";
                    hStock.stockinicial = 0;
                    if (LCP[0].updatestock.HasValue)
                    {
                        hStock.stockadicionado = LCP[0].updatestock.Value;
                    }
                    hStock.stockfinal = LCP[0].stock;
                    hStock.datacriacao = DateTime.Now.ToString("dd/MM/yyyy");

                    var resutlacompra = CAPC.Post(LCP[0]);
                    hStock.idprodutoalterado = resutlacompra.idproduto;
                    LC[0].idproduto = resutlacompra.idproduto;

                    LC[0].idcompra = resultado2.idcompra;
                    var resultado7 = ComprasC.Post(LC[0]);
                    hStockC.Post(hStock);
                    //if(resutlacompra.idcompra != 0 && resultado1.idcompra != 0)
                    //{
                    //    js.InvokeVoidAsync("alert", "Compra inserida com sucesso");
                    //}
                    //else
                    //{
                    //    js.InvokeVoidAsync("alert", "Compra inserida sem sucesso");
                    //}
                    //hStock = new HistoricoStock();
                    //ecp = new ClassificacaoProdutos();
                    //dtp = new TipoProduto();
                    //dtdp = new TipoDePeca();
                    //Compra = new Compras();
                    //CCP = new CabecalhoProdutos();
                    //LCP = new List<CabecalhoProdutos>();


                }
                else
                {
                    hStock.idprodutoalterado = LCP[0].idproduto;
                    hStock.tipocomponente = "Compra";
                    hStock.idcomponente = CCompra.numero;
                    hStock.tipo = "Entrada";
                    if (LCP[0].stockantigo.HasValue)
                    {
                        hStock.stockinicial = LCP[0].stockantigo.Value;
                    }
                    if (LCP[0].updatestock.HasValue)
                    {
                        hStock.stockadicionado = LCP[0].updatestock.Value;
                    }
                    hStock.stockfinal = LCP[0].stock;
                    hStock.datacriacao = DateTime.Now.ToString("dd/MM/yyyy");
                    var resultado5 = CAPC.Put(LCP[0].idproduto, LCP[0]);
                    LC[0].idcompra = resultado.idcompra;
                    //if (resultado5.Value.idcompra != 0)
                    //{
                    //    js.InvokeVoidAsync("alert", "Compra inserida com sucesso");
                    //}
                    //else
                    //{
                    //    js.InvokeVoidAsync("alert", "Compra inserida sem sucesso");
                    //}
                    var resultado7 = ComprasC.Post(LC[0]);
                    hStockC.Post(hStock);

                }

            }
            hStock = new HistoricoStock();
            ecp = new ClassificacaoProdutos();
            dtp = new TipoProduto();
            dtdp = new TipoDePeca();
            Compra = new Compras();
            CCP = new CabecalhoProdutos();
            LCP = new List<CabecalhoProdutos>();
            TDC = new TipodeCompra();
            CCompra = new CabecalhoCompras();
            fornecedores = new Fornecedores();

        }
        else
        {
            await js.InvokeVoidAsync("alert", "Impossível criar a encomenda, por favor, insira bem os dados da encomenda!");
        }
    }








    // Function that does the selecting in the selected buttons
    public async Task CriarProdutoNovo()
    {
        CCP = new CabecalhoProdutos();
        ProdutoNovo = true;
        CCP.produtonovo = true;
    }







    // Function that does the selecting in the selected buttons
    public async Task UsarProdutoExistente()
    {
        CCP = new CabecalhoProdutos();
        ProdutoNovo = false;
        CCP.produtonovo = false;
    }









































    private async Task<IEnumerable<Unidades>> ProcurarUnidades(string searchText)
    {
        return await Task.FromResult(listaUnidades.Where(h => h.indice.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<ClassificacaoProdutos>> ProcurarClassificação(string searchText)
    {
        return await Task.FromResult(listaClassificacaoProdutos.Where(h => h.codigoat.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<TipoDePeca>> ProcurarPecas(string searchText)
    {
        return await Task.FromResult(listaTipoDePecas.Where(h => h.codigo.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower()) || h.idpeca.ToString().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<Fornecedores>> ProcurarFornecedores(string searchText)
    {
        return await Task.FromResult(listaFornecedores.Where(h => h.codigo.ToLower().Contains(searchText.ToLower()) || h.nome.ToLower().Contains(searchText.ToLower()) || h.nomevendedor.ToString().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<TipoProduto>> ProcurarTipoProdutos(string searchText)
    {
        return await Task.FromResult(listaTipoProdutos.Where(h => h.codigo.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<CabecalhoProdutos>> ProcurarProdutos(string searchText)
    {
        return await Task.FromResult(listaCabecalhoProduto.Where(h => h.descricao.ToLower().Contains(searchText.ToLower()) || h.idproduto.Equals(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<Colaboradores>> ProcurarColaboradores(string searchText)
    {
        return await Task.FromResult(colaboradores.Where(h => h.codigo.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<TipodeCompra>> ProcurarCompra(string searchText)
    {
        return await Task.FromResult(LTDC.Where(h => h.idtipocompra.ToString().ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
    }

}