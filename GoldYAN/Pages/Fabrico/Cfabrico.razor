@page "/cfabrico"
@using GoldYAN.Data
@inject IJSRuntime JsRuntime
@attribute [Authorize(Roles = "Admin, Dev, Contabilidade")]

<div class="container-fluid">
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 style="display: inline" class="m-0 font-weight-bold text-primary">Cabeçalho Fabrico</h6>
        </div>
        <EditForm Model="@CF">
            <div class="m-3 form-group">
                <div class="form-inline">
                    <label for="Descricao">Descrição:</label> &nbsp
                    <InputText autocomplete="false" oninput="this.value = this.value.toUpperCase()" id="Descricao" disabled="true" class="form-control" placeholder="Descrição fabrico" @bind-Value="CF.idencomenda" />
                </div>
            </div>
            <div class="m-3 form-group">
                <div class="form-inline">
                    <label for="datatransação">Data Transação:</label> &nbsp
                    <InputText autocomplete="false" oninput="this.value = this.value.toUpperCase()" id="datatransação" disabled="true" class="form-control" placeholder="Ainda não selecionado" @bind-Value="CF.datacriacao" />
                </div>
            </div>
        </EditForm>
    </div>
</div>

<div class="container-fluid">
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 style="display: inline" class="m-0 font-weight-bold text-primary">Cabeçalho Produto</h6><div style="display: inline" class="float-right"><button class="btn btn-primary btn-sm" style="display: inline; margin-right: 5px" @onclick="CriarProdutoNovo">Produto Novo</button><button class="btn btn-success btn-sm" @onclick="UsarProdutoExistente">Produto Existente</button></div>
        </div>

        @if (ProdutoNovo)
        {


            <EditForm Model="@CCP">
                <div class="m-3 form-group">
                    <div class="form-inline">
                        <label for="Descricao">Descrição:</label> &nbsp
                        <InputText oninput="this.value = this.value.toUpperCase()" id="Descricao" class="form-control" placeholder="Descrição do produto" @bind-Value="CCP.descricao" />
                    </div>
                </div>
            </EditForm>
            <div class="m-3 form-group ">
                <div class="form-inline">
                    <label for="nome" class="">Classificação de Produto:</label>
                    <BlazoredTypeahead class="col-sm-5" DisableClear="true" EnableDropDown="true" SearchMethod="ProcurarClassificação" oninput="this.value = this.value.toUpperCase()" @bind-Value="ecp" Placeholder="Pesquisar classificação">
                        <SelectedTemplate>
                            @context.codigo (Desc: @context.descricao)
                        </SelectedTemplate>
                        <ResultTemplate>@context.codigo + @context.descricao </ResultTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>

            <div class="m-3 form-group ">
                <div class="form-inline">
                    <label for="nome" class="">Tipo de Produto:</label>
                    <BlazoredTypeahead class="col-sm-5" DisableClear="true" EnableDropDown="true" SearchMethod="ProcurarTipoProdutos" oninput="this.value = this.value.toUpperCase()" @bind-Value="dtp" Placeholder="Pesquisar tipo de produto">
                        <SelectedTemplate>
                            @context.codigo (Desc: @context.descricao)
                        </SelectedTemplate>
                        <ResultTemplate>@context.codigo + @context.descricao </ResultTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>

            <div class="m-3 form-group ">
                <div class="form-inline">
                    <label for="nome" class="">Tipo de Peça:</label>
                    <BlazoredTypeahead class="" DisableClear="true" EnableDropDown="true" SearchMethod="ProcurarPecas" oninput="this.value = this.value.toUpperCase()" @bind-Value="dtdp" Placeholder="Pesquisar peça">
                        <SelectedTemplate>
                            @context.codigo (Desc: @context.descricao)
                        </SelectedTemplate>
                        <ResultTemplate> @context.codigo + @context.descricao </ResultTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>
            <div class="m-3 form-group ">
                <div class="form-inline">
                    <label for="nome" class="">Fornecedor:</label>
                    <BlazoredTypeahead class="" DisableClear="true" EnableDropDown="true" SearchMethod="ProcurarFornecedores" oninput="this.value = this.value.toUpperCase()" @bind-Value="fornecedores" Placeholder="Pesquisar fornecedor">
                        <SelectedTemplate>
                            @context.codigo (Desc: @context.nome)
                        </SelectedTemplate>
                        <ResultTemplate> @context.codigo + @context.nome </ResultTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>

            <div class="m-3 form-group ">
                <div class="form-inline">
                    <label for="nome" class="">Unidades:</label>
                    <BlazoredTypeahead class="col-sm-5" DisableClear="true" EnableDropDown="true" SearchMethod="ProcurarUnidades" oninput="this.value = this.value.toUpperCase()" @bind-Value="unidade" Placeholder="Pesquisar unidade">
                        <SelectedTemplate>
                            @context.indice (Desc: @context.descricao)
                        </SelectedTemplate>
                        <ResultTemplate>@context.indice + @context.descricao </ResultTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>


            <EditForm Model="@CCP">

                <div class="m-3 form-group">
                    <div class="form-inline">
                        <label for="Descricao">Quantidade:</label> &nbsp
                        <InputNumber oninput="this.value = this.value.toUpperCase()" id="Descricao" class="form-control" placeholder="Quantidade do produto" @bind-Value="CCP.updatestock" />
                    </div>
                </div>
                <div class="m-3 form-group">
                    <div class="form-inline">
                        <label for="Descricao">Feitio:</label> &nbsp
                        <InputNumber oninput="this.value = this.value.toUpperCase()" id="Descricao" class="form-control" placeholder="Feitio do produto" @bind-Value="CCP.feitiopeca" />
                    </div>
                </div>
                <div class="m-3 form-group">
                    <div class="form-inline">
                        <label for="Descricao">Margem:</label> &nbsp
                        <InputNumber oninput="this.value = this.value.toUpperCase()" id="Descricao" class="form-control" placeholder="Margem do produto" @bind-Value="CCP.margem" />
                    </div>
                </div>

            </EditForm>



        }
        else
        {
            <div class="m-3 form-group">
                <div class="form-inline">
                    <label for="nome">Produto:</label>
                    <BlazoredTypeahead SearchMethod="ProcurarProdutos" DisableClear="true" EnableDropDown="true" oninput="this.value = this.value.toUpperCase()" @bind-Value="CCP" Placeholder="Pesquisar Produto">
                        <SelectedTemplate>
                            @context.idproduto + @context.descricao
                        </SelectedTemplate>
                        <NotFoundTemplate>
                        </NotFoundTemplate>
                        <ResultTemplate>@context.idproduto + @context.descricao</ResultTemplate>
                    </BlazoredTypeahead>

                    <EditForm Model="@CCP">

                        <div class="m-3 form-group">
                            <div class="form-inline">
                                <label for="Descricao">Quantidade:</label> &nbsp
                                <InputNumber oninput="this.value = this.value.toUpperCase()" id="Descricao" class="form-control" placeholder="Quantidade Fabricada" @bind-Value="CCP.updatestock" />
                            </div>
                        </div>

                    </EditForm>

                </div>
            </div>
        }





    </div>
</div>



<div class="container-fluid">
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary" style="display:inline;">Formulário Produtos</h6>
            @if (dtdp.idpeca == 0 || dtp.idtipoproduto == 0)
            {
                <h6 class="m-1 float-right text-danger" style="display: inline;">Preencha primeiro o cabeçalho do modelo!</h6>
            }
            else
            {
                Readonly = false;
            }

        </div>

        <EditForm Model="cp">
            <div class="m-3 form-group col-sm-5">
                <div class="form-inline">
                    <label for="Descricao">Componente:</label> &nbsp
                    <InputSelect @bind-Value="@cp.formadepesquisa">
                        <option selected>Produtos</option>
                        <option>Serviço</option>
                    </InputSelect>
                </div>
            </div>
        </EditForm>


        @if (cp.formadepesquisa == "Serviço")
        {
            <div class="m-3 form-group">
                <div class="form-inline">
                    <label for="nome">Serviço:</label>
                    <BlazoredTypeahead SearchMethod="ProcurarServicos" DisableClear="true" EnableDropDown="true" Disabled="@Readonly" oninput="this.value = this.value.toUpperCase()" @bind-Value="servicos" Placeholder="Pesquisar Serviço">
                        <SelectedTemplate>
                            @context.descricao
                        </SelectedTemplate>
                        <ResultTemplate>@context.codigo + @context.descricao</ResultTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>

            <div class="m-3 form-group">
                <div class="form-inline">
                    <label for="nome">Colaborador:</label>
                    <BlazoredTypeahead SearchMethod="ProcurarColaboradores" DisableClear="true" EnableDropDown="true" Disabled="@Readonly" oninput="this.value = this.value.toUpperCase()" @bind-Value="cl" Placeholder="Pesquisar Colaborador">
                        <SelectedTemplate>
                            @context.codigo + @context.descricao
                        </SelectedTemplate>
                        <ResultTemplate>@context.codigo + @context.descricao</ResultTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>

            <EditForm Model="@cp" OnValidSubmit="AdicionarComposto">
                <DataAnnotationsValidator />

                <div class="m-3 form-group">
                    <div class="form-inline">
                        <label for="preco">Preco:</label> &nbsp
                        <InputNumber autocomplete="false" style="-moz-appearance: textfield;" id="preco" class="form-control" placeholder="Preço do Colaborador" disabled="@Readonly" @bind-Value="cl.valor" />
                    </div>
                </div>

                <div class="m-3 form-group">
                    <div class="form-inline">
                        <label for="Quantidade">Quantidade:</label> &nbsp
                        <InputNumber autocomplete="false" style="-moz-appearance: textfield;" id="Quantidade" class="form-control" placeholder="Quantidade" disabled="@Readonly" @bind-Value="cp.quantidade" />
                    </div>
                </div>

            </EditForm>

        }
        else
        {
            <div class="m-3 form-group">
                <div class="form-inline">
                    <label for="nome">Produtos:</label>
                    <BlazoredTypeahead SearchMethod="ProcurarProdutos" DisableClear="true" EnableDropDown="true" Disabled="@Readonly" oninput="this.value = this.value.toUpperCase()" @bind-Value="produtos" Placeholder="Pesquisar Produto">
                        <SelectedTemplate>
                            @context.idproduto + @context.descricao
                        </SelectedTemplate>
                        <ResultTemplate>@context.idproduto + @context.descricao</ResultTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>

            <EditForm Model="@cp" OnValidSubmit="AdicionarComposto">
                <DataAnnotationsValidator />

                <div class="m-3 form-group">
                    <div class="form-inline">
                        <label for="preco">Preco:</label> &nbsp
                        <InputNumber autocomplete="false" style="-moz-appearance: textfield;" id="preco" class="form-control" placeholder="@produtos.preco" disabled="@Readonly" @bind-Value="produtos.preco" />
                    </div>
                </div>

                <div class="m-3 form-group">
                    <div class="form-inline">
                        <label for="Quantidade">Quantidade:</label> &nbsp
                        <InputNumber autocomplete="false" style="-moz-appearance: textfield;" id="Quantidade" class="form-control" placeholder="Quantidade" disabled="@Readonly" @bind-Value="cp.quantidade" />
                    </div>
                </div>

            </EditForm>

        }

        @if (save)
        {
            <div class="m-3 form-group">
                <button type="submit" @onclick="EditarComposto" class="btn btn-primary">Editar</button>
            </div>
        }
        else
        {
            <div class="m-3 form-group">
                <button type="submit" @onclick="AdicionarComposto" class="btn btn-primary">Adicionar</button>
            </div>
        }

    </div>
</div>

<div class="container-fluid">
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Sumário da Encomenda</h6>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <div id="dataTable_wrapper" class="dataTables_wrapper dt-bootstrap4">
                    <div class="col-sm-12">
                        <table class="table table-bordered dataTable" id="dataTable" width="100%" cellspacing="0" role="grid" aria-describedby="dataTable_info" style="width: 100%;table-layout: fixed;">
                            <thead>
                                <tr role="row"><th class="sorting_asc" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-sort="ascending" aria-label="Name: activate to sort column descending" style="width: 90px;">Componente</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Position: activate to sort column ascending" style="width: 100px;">Colaborador</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Office: activate to sort column ascending" style="width: 71px;">Classificação</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Start date: activate to sort column ascending" style="width: 68px;">Descrição</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Start date: activate to sort column ascending" style="width: 30px;">Qtd.</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Start date: activate to sort column ascending" style="width: 30px;">Peso</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Salary: activate to sort column ascending" style="width: 30px;">Valor.Un.</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Start date: activate to sort column ascending" style="width: 30px;">Valor Total</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Start date: activate to sort column ascending" style="width: 68px;">Ações</th></tr>
                            </thead>
                            <tfoot>
                                <tr><th rowspan="1" colspan="1">Componente</th><th rowspan="1" colspan="1">Colaborador</th><th rowspan="1" colspan="1">Classificação</th><th rowspan="1" colspan="1">Descrição</th><th rowspan="1" colspan="1">Qtd.</th><th rowspan="1" colspan="1">Peso</th><th rowspan="1" colspan="1">Valor.Un.</th><th rowspan="1" colspan="1">Valor Total</th><th rowspan="1" colspan="1">Ações</th></tr>
                            </tfoot>
                            <tbody>
                                @for (int i = 0; i < LCP.Count; i++)
                                {
                                    <tr style="height: 1em;">
                                        @if (LCP[i].idservico.HasValue)
                                        {
                                            <td style="overflow: hidden; white-space: nowrap;" title="@LCP[i].idservico">Servico</td>
                                            <td style="overflow: hidden; white-space: nowrap;" title="@LCP[i].idcolaborador">@LCP[i].idcolaborador</td>
                                            <td style="overflow: hidden; white-space: nowrap;" title="@LCP[i].idservico">@LCP[i].idservico</td>
                                            <td style="overflow: hidden; white-space: nowrap;" title="@LCP[i].descricao">@LCP[i].descricao</td>
                                            <td style="overflow: hidden; white-space: nowrap;" title="@LCP[i].quantidade">@LCP[i].quantidade</td>
                                            <td style="overflow: hidden; white-space: nowrap;" title="@LCP[i].peso">@LCP[i].peso</td>
                                            <td style="overflow: hidden; white-space: nowrap;" title="@LCP[i].custo">@LCP[i].custo</td>
                                            <td style="overflow: hidden; white-space: nowrap;" title="@LCP[i].custototal">@LCP[i].custototal</td>
                                            <td><button class="btn btn-primary btn-sm" @onclick="() => LoadData(i)" style="margin-left: 1rem"><i class="fas fa-pen"></i></button><button @onclick="() => ApagarItemLista(i)" class="btn btn-danger btn-sm" style="margin-left: 0.3rem"><i class="fas fa-trash"></i></button></td>

                                        }
                                        else
                                        {
                                            <td style="overflow: hidden; white-space: nowrap;" title="@LCP[i].idproduto">Produto</td>
                                            <td style="overflow: hidden; white-space: nowrap;" title="@LCP[i].idcolaborador">@LCP[i].idcolaborador</td>
                                            <td style="overflow: hidden; white-space: nowrap;" title="@LCP[i].idproduto">@LCP[i].idproduto</td>
                                            <td style="overflow: hidden; white-space: nowrap;" title="@LCP[i].descricao">@LCP[i].descricao</td>
                                            <td style="overflow: hidden; white-space: nowrap;" title="@LCP[i].quantidade">@LCP[i].quantidade</td>
                                            <td style="overflow: hidden; white-space: nowrap;" title="@LCP[i].peso">@LCP[i].peso</td>
                                            <td style="overflow: hidden; white-space: nowrap;" title="@LCP[i].custo">@LCP[i].custo</td>
                                            <td style="overflow: hidden; white-space: nowrap;" title="@LCP[i].custototal">@LCP[i].custototal</td>
                                            <td><button class="btn btn-primary btn-sm" style="margin-left: 1rem"><i class="fas fa-pen"></i></button><button class="btn btn-danger btn-sm" style="margin-left: 0.3rem"><i class="fas fa-trash"></i></button></td>

                                        }

                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <button type="button" @onclick="CriarProduto" class="btn btn-success">Criar Produto</button>


    </div>
</div>



@code {

    //Declaration of needed objects
    Data.CabecalhoProdutos CCP = new CabecalhoProdutos();
    Data.Servicos servicos = new Servicos();
    Data.CabecalhoProdutos produtos = new CabecalhoProdutos();
    Data.CabecalhosModelos cm = new CabecalhosModelos();
    Data.Colaboradores cl = new Colaboradores();
    Data.TipoDePeca dtdp = new TipoDePeca();
    Data.TipoProduto dtp = new TipoProduto();
    Data.Produtos cp = new Data.Produtos();
    Data.Fornecedores fornecedores = new Data.Fornecedores();
    Data.ClassificacaoProdutos ecp = new Data.ClassificacaoProdutos();
    Data.CabecalhoFabrico CF = new Data.CabecalhoFabrico();
    Data.Fabrico F = new Data.Fabrico();
    Data.Unidades unidade = new Data.Unidades();
    Data.IDMaximo IDMaximo = new Data.IDMaximo();
    Data.HistoricoStock hStock = new Data.HistoricoStock();
    Data.Produtos RProduto = new Data.Produtos();
    Data.CabecalhoProdutos UProduto = new Data.CabecalhoProdutos();
    List<Data.Produtos> GProduto = new List<Data.Produtos>();

    // Declaration of needed lists
    List<Unidades> listaUnidades = new List<Unidades>();
    List<ClassificacaoProdutos> listaClassificacaoProdutos = new List<ClassificacaoProdutos>();
    List<Fornecedores> listaFornecedores = new List<Fornecedores>();
    List<Servicos> ListaServicos = new List<Servicos>();
    List<TipoDePeca> listaTipoDePecas = new List<TipoDePeca>();
    List<TipoProduto> listaTipoProdutos = new List<TipoProduto>();
    List<Data.Produtos> listaProdutos = new List<Produtos>();
    List<CabecalhosModelos> listacabecalhoModeloControllers = new List<CabecalhosModelos>();
    List<Colaboradores> colaboradores = new List<Colaboradores>();
    List<CabecalhoProdutos> listaCabecalhoProduto = new List<CabecalhoProdutos>();

    //For input values
    List<Data.Produtos> LCP = new List<Produtos>();
    List<Data.Fabrico> LCFP = new List<Fabrico>();

    // General variables
    bool Readonly = false;
    int i;
    string formadepesquisa;
    bool ProdutoNovo = true;
    string idencomendaselecionada;
    int iencomenda;
    bool save = false;


    // Function that always runs when someone enter in the page
    protected override async Task OnInitializedAsync()
    {

        // Values that the program search in database
        listaFornecedores = FC.GetAll();
        listacabecalhoModeloControllers = CMC.GetAll();
        listaClassificacaoProdutos = CPC.GetAll();
        listaUnidades = UC.GetAll();
        listaTipoDePecas = TPC.GetAll();
        listaTipoProdutos = TPRC.GetAll();
        ListaServicos = SC.GetAll();
        listaCabecalhoProduto = CAPC.GetAll();
        CCP.produtonovo = true;
        colaboradores = colaboradoresController.GetAll();
        CCP.preco = 0;
        CCP.stock = 0;
        CCP.custototal = 0;

        // Initial Values in CFabrico Page
        var res = CAPC.GetMaxID();
        JsRuntime.InvokeVoidAsync("console.log", res);
        CF.datacriacao = DateTime.Now.ToShortDateString();

    }

    // Function that creates the product if new and creates also the cabecalhofabrico and fabrico
    public async Task CriarProduto()
    {
        if (LCP.Count != 0)
        {
            if (CCP.produtonovo)
            {
                //Vai buscar o utilizador que está logado
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;

                CCP.idmodelo = cm.idmodelo;
                CCP.idclassificação = ecp.IDClassificacao;
                CCP.idunidade = unidade.idunidade;
                CCP.idtipodeproduto = dtp.idtipoproduto;
                CCP.idtipodepeca = dtdp.idpeca;
                CCP.idfornecedor = fornecedores.idfornecedor;
                CCP.preco = CCP.custototal;

                if (CCP.updatestock.HasValue)
                {
                    CCP.stock = CCP.updatestock.Value;
                }


                //if (CCP.peso.HasValue && CCP.cotacao.HasValue && CCP.updatestock.HasValue)
                //{
                //    CCP.preco = (CCP.peso.Value * CCP.cotacao.Value) + CCP.feitiopeca;
                //    CCP.custototal = CCP.preco * CCP.updatestock;

                //}
                //else if (CCP.peso.HasValue && CCP.cotacao.HasValue && !CCP.updatestock.HasValue)
                //{
                //    CCP.preco = (CCP.peso.Value * CCP.cotacao.Value) + CCP.feitiopeca;
                //    CCP.custototal = CCP.preco;
                //}
                //else if (CCP.updatestock.HasValue)
                //{
                //    CCP.preco = CCP.feitiopeca;
                //    CCP.custototal = CCP.preco * CCP.updatestock;
                //}
                //else
                //{
                //    js.InvokeVoidAsync("alert", "Impossivel fazer o preço, o produto vai ser criado sem preço");
                //}




                hStock.tipocomponente = "FAB";
                hStock.tipo = "Entrada";
                hStock.stockinicial = 0;

                if (CCP.updatestock.HasValue)
                {
                    hStock.stockadicionado = CCP.updatestock.Value;
                }
                if (CCP.stock.HasValue)
                {
                    hStock.stockfinal = CCP.stock.Value;
                }
                hStock.datacriacao = DateTime.Now.ToString("dd/MM/yyyy H:mm");

                if (CCP.preco.HasValue)
                {
                    if (CCP.margem.HasValue)
                    {
                        CCP.preco = CCP.preco * CCP.margem;
                        CCP.pvp = CCP.preco * 1.23;
                    }
                    else
                    {
                        CCP.pvp = CCP.preco * 1.23;
                    }
                }

                var resultado = CAPC.Post(CCP);
                await Task.Delay(1000);

                CF.idproduto = resultado.idproduto;
                CF.idencomenda = idencomendaselecionada;

                var resultado2 = CFC.Post(CF);
                hStock.idcomponente = resultado2.idfabrico.ToString();
                hStock.idprodutoalterado = resultado.idproduto;
                hStockC.Post(hStock);
                hStock = new HistoricoStock();
                await Task.Delay(1000);


                for (int i = 0; i < LCP.Count; i++)
                {
                    LCP[i].linha = i + 1;
                    LCP[i].idproduto = resultado.idproduto;
                    LCP[i].idfabrico = resultado2.idfabrico;
                    if (LCP[i].idprodutos != 0)
                    {

                        UProduto = CAPC.Get(LCP[i].idprodutos.Value);
                        if (UProduto.stock.HasValue)
                        {
                            hStock.stockinicial = UProduto.stock.Value;
                        }
                        UProduto.stock = UProduto.stock - LCP[i].quantidade;
                        hStock.stockadicionado = LCP[i].quantidade;
                        CAPC.Put(UProduto.idproduto, UProduto);
                        // Adds to history
                        hStock.tipocomponente = "FAB";
                        hStock.idcomponente = resultado2.idfabrico.ToString();
                        hStock.tipo = "Saida";
                        if (LCP[i].idprodutos.HasValue)
                        {
                            hStock.idprodutoalterado = LCP[i].idprodutos.Value;
                        }
                        hStock.datacriacao = DateTime.Now.ToString("dd/MM/yyyy H:mm");
                        hStock.referenciasaida = resultado.idproduto.ToString() + "-" + resultado.descricao;
                        var resultado4 = hStockC.Post(hStock);
                        hStock = new HistoricoStock();
                        if (UProduto.stock.HasValue)
                        {
                            hStock.stockfinal = UProduto.stock.Value;
                        }
                        UProduto = new CabecalhoProdutos();

                    }
                    LCFP[i].idfabrico = resultado2.idfabrico;



                    var resultado3 = PC.Post(LCP[i]);

                    LCFP[i].idfabrico = resultado2.idfabrico;
                    var resultado5 = FBCC.Post(LCFP[i]);

                    if (resultado.idproduto != 0 && resultado2.idfabrico != 0)
                    {
                        js.InvokeVoidAsync("alert", "Fabrico criado com sucesso!");
                    }

                }

                LCFP = new List<Fabrico>();
                LCP = new List<Produtos>();
                CCP = new CabecalhoProdutos();
                hStock = new HistoricoStock();
                produtos = new CabecalhoProdutos();
                cp = new Produtos();
                CF = new CabecalhoFabrico();
                cm = new CabecalhosModelos();
                servicos = new Servicos();
                cl = new Colaboradores();
                ecp = new ClassificacaoProdutos();
                unidade = new Unidades();
                dtdp = new TipoDePeca();
                dtp = new TipoProduto();
                fornecedores = new Fornecedores();
            }
            else
            {
                //Vai buscar o utilizador que está logado
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;
                CCP.preco = CCP.custototal;
                if(CCP.stock.HasValue)
                {
                    CCP.stockantigo = CCP.stock.Value;
                    hStock.stockinicial = CCP.stockantigo.Value;
                }


                if (CCP.updatestock.HasValue)
                {
                    CCP.stocktotal = CCP.stockantigo + CCP.updatestock.Value;
                }
                else if (CCP.peso.HasValue)
                {
                    CCP.stocktotal = CCP.stockantigo + CCP.peso.Value;
                }
                else
                {
                    js.InvokeVoidAsync("alert", "Impossivel adicionar stock ao produto, o produto foi composto sem stock!");

                }

                if (CCP.stocktotal.HasValue)
                {
                    CCP.stock = CCP.stocktotal.Value;
                }

                hStock.tipocomponente = "FAB";
                hStock.tipo = "Entrada";

                if (CCP.updatestock.HasValue)
                {
                    hStock.stockadicionado = CCP.updatestock.Value;
                }
                if (CCP.stock.HasValue)
                {
                    hStock.stockfinal = CCP.stock.Value;
                }
                hStock.datacriacao = DateTime.Now.ToString("dd/MM/yyyy H:mm");

                if (CCP.preco.HasValue)
                {
                    if (CCP.margem.HasValue)
                    {
                        CCP.preco = CCP.preco * CCP.margem;
                        CCP.pvp = CCP.preco * 1.23;
                    }
                    else
                    {
                        CCP.pvp = CCP.preco * 1.23;
                    }
                }

                var resultado = CAPC.Put(CCP.idproduto, CCP);
                await Task.Delay(1000);

                CF.idproduto = CCP.idproduto;
                CF.idencomenda = idencomendaselecionada;

                var resultado2 = CFC.Post(CF);
                hStock.idcomponente = resultado2.idfabrico.ToString();
                hStock.idprodutoalterado = CCP.idproduto;
                hStockC.Post(hStock);
                hStock = new HistoricoStock();
                await Task.Delay(1000);
                GProduto = PC.GetAllQuery(CCP.idproduto);
                var maxlinha = GProduto.Max(z => z.linha);

                for (int i = 0; i < LCP.Count; i++)
                {
                    LCP[i].linha = maxlinha;
                    maxlinha = maxlinha + 1;
                    LCP[i].linha = LCP[i].linha + 1;
                    LCP[i].idfabrico = resultado2.idfabrico;

                    LCP[i].idproduto = CCP.idproduto;
                    if (LCP[i].idprodutos != 0)
                    {

                        UProduto = CAPC.Get(LCP[i].idprodutos.Value);
                        if (UProduto.stock.HasValue)
                        {
                            hStock.stockinicial = UProduto.stock.Value;
                        }
                        UProduto.stock = UProduto.stock - LCP[i].quantidade;
                        hStock.stockadicionado = LCP[i].quantidade;
                        CAPC.Put(UProduto.idproduto, UProduto);
                        // Adds to history
                        hStock.tipocomponente = "FAB";
                        hStock.idcomponente = resultado2.idfabrico.ToString();
                        hStock.tipo = "Saida";
                        if (LCP[i].idprodutos.HasValue)
                        {
                            hStock.idprodutoalterado = LCP[i].idprodutos.Value;
                        }
                        hStock.datacriacao = DateTime.Now.ToString("dd/MM/yyyy H:mm");
                        hStock.referenciasaida = CCP.idproduto.ToString() + "-" + CCP.descricao;
                        var resultado4 = hStockC.Post(hStock);
                        hStock = new HistoricoStock();
                        if (UProduto.stock.HasValue)
                        {
                            hStock.stockfinal = UProduto.stock.Value;
                        }
                        UProduto = new CabecalhoProdutos();

                    }
                    LCFP[i].idfabrico = resultado2.idfabrico;



                    var resultado3 = PC.Post(LCP[i]);

                    LCFP[i].idfabrico = resultado2.idfabrico;
                    var resultado5 = FBCC.Post(LCFP[i]);

                    if (resultado2.idfabrico != 0)
                    {
                        js.InvokeVoidAsync("alert", "Fabrico criado com sucesso!");
                    }

                }

                LCFP = new List<Fabrico>();
                LCP = new List<Produtos>();
                CCP = new CabecalhoProdutos();
                hStock = new HistoricoStock();
                produtos = new CabecalhoProdutos();
                cp = new Produtos();
                CF = new CabecalhoFabrico();
                cm = new CabecalhosModelos();
                servicos = new Servicos();
                cl = new Colaboradores();
                ecp = new ClassificacaoProdutos();
                unidade = new Unidades();
                dtdp = new TipoDePeca();
                dtp = new TipoProduto();
                fornecedores = new Fornecedores();
            }
        }
        else
        {
            await js.InvokeVoidAsync("alert", "Impossível criar a encomenda, por favor, insira bem os dados da encomenda!");
        }
    }


    public async Task EditarComposto()
    {
        Data.Fabrico fabricocomposto = new Data.Fabrico();

        if (servicos.idservico != 0)
        {
            i++;
            cp.linha = i;
            cp.custo = cl.valor;
            cp.idcolaborador = cl.idcolaborador;
            cp.idservico = servicos.idservico;
            cp.descricao = servicos.descricao;
            cp.datacriacao = DateTime.Now.ToString();
            if (servicos.custo != 0)
            {
                cp.custo = servicos.custo;
                cp.custototal = cp.custo * cp.quantidade;
                CCP.custototal += cp.quantidade * produtos.preco;
            }
            fabricocomposto.linha = i;
            fabricocomposto.custo = cl.valor;
            fabricocomposto.idservico = servicos.idservico;
            fabricocomposto.descricao = servicos.descricao;
            fabricocomposto.customedio = cp.customedio;
            fabricocomposto.custototal = cp.custototal;
            fabricocomposto.datacriacao = DateTime.Now.ToShortDateString();
            fabricocomposto.peso = cp.peso;
            fabricocomposto.quantidade = cp.quantidade;

            LCP.RemoveAt(iencomenda);
            LCP.Insert(iencomenda, cp);

            LCFP.RemoveAt(iencomenda);
            LCFP.Insert(iencomenda, fabricocomposto);

            cm = new CabecalhosModelos();
            servicos = new Servicos();
            produtos = new CabecalhoProdutos();
            cl = new Colaboradores();
            cp = new Produtos();
            fabricocomposto = new Fabrico();

        }
        else if (produtos.idproduto != 0)
        {
            i++;
            cp.linha = i;
            cp.custo = cl.valor;
            cp.idcolaborador = cl.idcolaborador;
            cp.idprodutos = produtos.idproduto;
            cp.descricao = produtos.descricao;
            cp.datacriacao = DateTime.Now.ToString();
            if (produtos.peso.HasValue)
            {
                cp.peso = produtos.peso.Value;

            }
            if (produtos.preco.HasValue)
            {
                cp.custo = produtos.preco.Value;
                cp.custototal = cp.custo * cp.quantidade;
                CCP.custototal += cp.custototal;
            }
            fabricocomposto.linha = i;
            fabricocomposto.custo = cl.valor;
            fabricocomposto.idprodutos = produtos.idproduto;
            fabricocomposto.descricao = produtos.descricao;
            fabricocomposto.customedio = cp.customedio;
            fabricocomposto.custototal = cp.custototal;
            fabricocomposto.datacriacao = DateTime.Now.ToShortDateString();
            fabricocomposto.peso = cp.peso;
            fabricocomposto.quantidade = cp.quantidade;

            LCP.RemoveAt(iencomenda);
            LCP.Insert(iencomenda, cp);

            LCFP.RemoveAt(iencomenda);
            LCFP.Insert(iencomenda, fabricocomposto);

            cm = new CabecalhosModelos();
            servicos = new Servicos();
            produtos = new CabecalhoProdutos();
            cl = new Colaboradores();
            cp = new Produtos();
            fabricocomposto = new Fabrico();

        }
        else
        {
            await js.InvokeVoidAsync("alert", "Impossivél adicionar, por favor verifique os campos!");
        }
    }

    public async Task ApagarItemLista(int i)
    {
        LCP.RemoveAt(i);
    }


    public async Task LoadData(int i)
    {
        iencomenda = i;
        cp = LCP[i];
        if (cp.idprodutos.HasValue)
        {
            produtos = CAPC.Get(cp.idprodutos.Value);
        }
        else
        {
            servicos = SC.Get(cp.idservico.Value);
        }
        save = true;
    }


    // Function that does the selecting in the selected buttons
    public async Task CriarProdutoNovo()
    {

        CCP = new CabecalhoProdutos();
        LCP = new List<Produtos>();
        produtos = new CabecalhoProdutos();
        ProdutoNovo = true;
        CCP.preco = 0;
        CCP.stock = 0;
        CCP.produtonovo = true;
        listaCabecalhoProduto = CAPC.GetAll();
    }

    // Function that does the selecting in the selected buttons
    public async Task UsarProdutoExistente()
    {
        CCP = new CabecalhoProdutos();
        CCP.produtonovo = false;
        LCP = new List<Produtos>();
        produtos = new CabecalhoProdutos();
        ProdutoNovo = false;
    }

    // Add the compost to a list
    public async Task AdicionarComposto()
    {
        Data.Fabrico fabricocomposto = new Data.Fabrico();

        if (CCP.produtonovo)
        {
            if (servicos.idservico != 0)
            {
                i++;
                cp.linha = i;
                cp.custo = cl.valor;
                cp.idcolaborador = cl.idcolaborador;
                cp.idservico = servicos.idservico;
                cp.descricao = servicos.descricao;
                cp.datacriacao = DateTime.Now.ToString();
                CCP.produtonovo = true;
                cp.datacriacao = DateTime.Now.ToString();
                if (servicos.custo != 0)
                {
                    cp.custo = servicos.custo;
                    cp.custototal = cl.valor * cp.quantidade;

                    CCP.custototal = CCP.custototal.Value + (cp.quantidade * cl.valor);
                }


                fabricocomposto.linha = i;
                fabricocomposto.custo = cl.valor;
                fabricocomposto.idservico = servicos.idservico;
                fabricocomposto.descricao = servicos.descricao;
                fabricocomposto.customedio = cp.customedio;
                fabricocomposto.custototal = cp.custototal;
                fabricocomposto.datacriacao = DateTime.Now.ToShortDateString();
                fabricocomposto.peso = cp.peso;
                fabricocomposto.quantidade = cp.quantidade;

                LCP.Add(cp);
                LCFP.Add(fabricocomposto);

                cm = new CabecalhosModelos();
                servicos = new Servicos();
                produtos = new CabecalhoProdutos();
                cl = new Colaboradores();
                cp = new Produtos();
                fabricocomposto = new Fabrico();

            }
            else if (produtos.idproduto != 0)
            {
                i++;
                cp.linha = i;
                cp.custo = cl.valor;
                cp.idcolaborador = cl.idcolaborador;
                cp.idprodutos = produtos.idproduto;
                cp.descricao = produtos.descricao;
                cp.datacriacao = DateTime.Now.ToString();
                CCP.produtonovo = true;
                if (produtos.peso.HasValue)
                {
                    cp.peso = produtos.peso.Value;

                }
                if (produtos.preco.HasValue)
                {
                    cp.custo = produtos.preco.Value;
                    cp.custototal = cp.custo * cp.quantidade;
                    CCP.custototal = CCP.custototal + cp.custototal;
                }
                fabricocomposto.linha = i;
                fabricocomposto.custo = cl.valor;
                fabricocomposto.idprodutos = produtos.idproduto;
                fabricocomposto.descricao = produtos.descricao;
                fabricocomposto.customedio = cp.customedio;
                fabricocomposto.custototal = cp.custototal;
                fabricocomposto.datacriacao = DateTime.Now.ToShortDateString();
                fabricocomposto.peso = cp.peso;
                fabricocomposto.quantidade = cp.quantidade;
                LCP.Add(cp);
                LCFP.Add(fabricocomposto);

                cm = new CabecalhosModelos();
                servicos = new Servicos();
                produtos = new CabecalhoProdutos();
                cl = new Colaboradores();
                cp = new Produtos();
                fabricocomposto = new Fabrico();

            }
            else
            {
                await js.InvokeVoidAsync("alert", "Impossivél adicionar, por favor verifique os campos!");
            }
        }
        else
        {

            if (servicos.idservico != 0)
            {
                i++;
                cp.linha = i;
                cp.custo = cl.valor;
                cp.idcolaborador = cl.idcolaborador;
                cp.idservico = servicos.idservico;
                cp.descricao = servicos.descricao;
                CCP.produtonovo = false;
                cp.datacriacao = DateTime.Now.ToString();
                if (servicos.custo != 0)
                {
                    cp.custo = servicos.custo;
                    cp.custototal = cp.custo * cp.quantidade;
                    if (CCP.preco.HasValue)
                    {
                        CCP.custototal = CCP.custototal + (cp.quantidade * cl.valor);

                    }
                    else
                    {
                        CCP.custototal = CCP.custototal + (cp.quantidade * cl.valor);

                    }
                }
                fabricocomposto.linha = i;
                fabricocomposto.custo = cl.valor;
                fabricocomposto.idservico = servicos.idservico;
                fabricocomposto.descricao = servicos.descricao;
                fabricocomposto.customedio = cp.customedio;
                fabricocomposto.custototal = cp.custototal;
                fabricocomposto.datacriacao = DateTime.Now.ToShortDateString();
                fabricocomposto.peso = cp.peso;
                fabricocomposto.quantidade = cp.quantidade;

                LCP.Add(cp);
                LCFP.Add(fabricocomposto);

                cm = new CabecalhosModelos();
                servicos = new Servicos();
                produtos = new CabecalhoProdutos();
                cl = new Colaboradores();
                cp = new Produtos();
                fabricocomposto = new Fabrico();

            }
            else if (produtos.idproduto != 0)
            {
                i++;
                cp.linha = i;
                cp.custo = cl.valor;
                cp.idcolaborador = cl.idcolaborador;
                CCP.produtonovo = false;
                cp.idprodutos = produtos.idproduto;
                cp.descricao = produtos.descricao;
                cp.datacriacao = DateTime.Now.ToString();
                if (produtos.peso.HasValue)
                {
                    cp.peso = produtos.peso.Value;

                }
                if (produtos.preco.HasValue)
                {
                    cp.custo = produtos.preco.Value;
                    cp.custototal = cp.custo * cp.quantidade;
                    if (CCP.preco.HasValue)
                    {
                        CCP.custototal = CCP.custototal + cp.custototal;

                    }
                    else
                    {
                        CCP.custototal = CCP.custototal + cp.custototal;

                    }
                }
                fabricocomposto.linha = i;
                fabricocomposto.custo = cl.valor;
                fabricocomposto.idprodutos = produtos.idproduto;
                fabricocomposto.descricao = produtos.descricao;
                fabricocomposto.customedio = cp.customedio;
                fabricocomposto.custototal = cp.custototal;
                fabricocomposto.datacriacao = DateTime.Now.ToShortDateString();
                fabricocomposto.peso = cp.peso;
                fabricocomposto.quantidade = cp.quantidade;
                LCP.Add(cp);
                LCFP.Add(fabricocomposto);

                cm = new CabecalhosModelos();
                servicos = new Servicos();
                produtos = new CabecalhoProdutos();
                cl = new Colaboradores();
                cp = new Produtos();
                fabricocomposto = new Fabrico();


            }
            else
            {
                await js.InvokeVoidAsync("alert", "Impossivél adicionar, por favor verifique os campos!");
            }
        }
    }

    public async Task EditarComposto(int linha)
    {
        LCP.RemoveAt(linha - 1);
        LCP.Insert(linha - 1, cp);
    }

    public async Task ApagarComposto(int linha)
    {
        LCP.Remove(listaProdutos[linha - 1]);
    }

    private async Task<IEnumerable<Unidades>> ProcurarUnidades(string searchText)
    {
        return await Task.FromResult(listaUnidades.Where(h => h.indice.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<ClassificacaoProdutos>> ProcurarClassificação(string searchText)
    {
        return await Task.FromResult(listaClassificacaoProdutos.Where(h => h.codigoat.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<TipoDePeca>> ProcurarPecas(string searchText)
    {
        return await Task.FromResult(listaTipoDePecas.Where(h => h.codigo.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower()) || h.idpeca.ToString().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<Fornecedores>> ProcurarFornecedores(string searchText)
    {
        return await Task.FromResult(listaFornecedores.Where(h => h.codigo.ToLower().Contains(searchText.ToLower()) || h.nome.ToLower().Contains(searchText.ToLower()) || h.nomevendedor.ToString().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<Servicos>> ProcurarServicos(string searchText)
    {
        return await Task.FromResult(ListaServicos.Where(h => h.codigo.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<TipoProduto>> ProcurarTipoProdutos(string searchText)
    {
        return await Task.FromResult(listaTipoProdutos.Where(h => h.codigo.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<CabecalhoProdutos>> ProcurarProdutos(string searchText)
    {
        return await Task.FromResult(listaCabecalhoProduto.Where(h => h.descricao.ToLower().Contains(searchText.ToLower()) || h.idproduto.Equals(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<Colaboradores>> ProcurarColaboradores(string searchText)
    {
        return await Task.FromResult(colaboradores.Where(h => h.codigo.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<CabecalhosModelos>> ProcurarModelos(string searchText)
    {
        return await Task.FromResult(listacabecalhoModeloControllers.Where(h => h.idmodelo.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
    }


}