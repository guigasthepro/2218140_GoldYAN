@page "/cmodelo"

@using GoldYAN.Data
@using GoldYAN.Controller
@using System
@attribute [Authorize]


<div class="container-fluid">
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Cabeçalho Modelo</h6>
        </div>
        <EditForm Model="@cm" OnValidSubmit="@AdicionarLista">
            <div class="m-3 form-group">
                <div class="form-inline">
                    <label for="Descricao">Referência do Modelo:</label> &nbsp
                    <InputText autocomplete="false" oninput="this.value = this.value.toUpperCase()" id="Descricao" class="form-control" placeholder="Código do modelo" @bind-Value="cm.idmodelo" />
                </div>
            </div>

            <div class="m-3 form-group">
                <div class="form-inline">
                    <label for="Descricao">Descrição:</label> &nbsp
                    <InputText autocomplete="false" oninput="this.value = this.value.toUpperCase()" id="Descricao" class="form-control" placeholder="Descrição do modelo" @bind-Value="cm.descricao" />
                </div>
            </div>
        </EditForm>

        <div class="m-3 form-group ">
            <div class="form-inline">
                <label for="nome" class="">Tipo de Produto:</label>
                <BlazoredTypeahead class="col-sm-5" SearchMethod="ProcurarTipoProdutos" DisableClear="true" EnableDropDown="true"  oninput="this.value = this.value.toUpperCase()" @bind-Value="dtp" Placeholder="Pesquisar tipo de produto">
                    <SelectedTemplate>
                        @context.idtipoproduto (Desc: @context.descricao)
                    </SelectedTemplate>
                    <ResultTemplate>@context.idtipoproduto + @context.descricao </ResultTemplate>
                </BlazoredTypeahead>
            </div>
        </div>

        <div class="m-3 form-group ">
            <div class="form-inline">
                <label for="nome" class="">Tipo de Peça:</label>
                <BlazoredTypeahead class="" SearchMethod="ProcurarPecas" DisableClear="true" EnableDropDown="true"  oninput="this.value = this.value.toUpperCase()" @bind-Value="dtdp" Placeholder="Pesquisar tipo de peça">
                    <SelectedTemplate>
                        @context.codigo (Desc: @context.descricao)
                    </SelectedTemplate>
                    <ResultTemplate> @context.codigo + @context.descricao </ResultTemplate>
                </BlazoredTypeahead>
            </div>
        </div>
    </div>
</div>



<div class="container-fluid">
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary" style="display:inline;">Formulário Modelos</h6>
            @if (dtdp.idpeca == 0 || dtp.idtipoproduto == 0)
            {
                <h6 class="m-1 float-right text-danger" style="display: inline;">Preencha primeiro o cabeçalho do modelo!</h6>
            }
            else
            {
                Readonly = false;
            }

        </div>



        <EditForm Model="m">
            <div class="m-3 form-group col-sm-5">
                <div class="form-inline">
                    <label for="Descricao">Componente:</label> &nbsp
                    <InputSelect @bind-Value="@m.formadepesquisa">
                        <option selected>------</option>
                        <option>Molde</option>
                        <option>Serviço</option>
                        <option>Produtos</option>
                    </InputSelect>
                </div>
            </div>
        </EditForm>


        @if (m.formadepesquisa == "Molde")
        {
            <div class="m-3 form-group">
                <div class="form-inline">
                    <label for="nome">Molde:</label>
                    <BlazoredTypeahead SearchMethod="ProcurarMoldes" DisableClear="true" EnableDropDown="true" Disabled="@Readonly" oninput="this.value = this.value.toUpperCase()" @bind-Value="mlds" Placeholder="Pesquisar Molde">
                        <SelectedTemplate>
                            @context.descricao
                        </SelectedTemplate>
                        <ResultTemplate> @context.codigo + @context.descricao</ResultTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>
        }
        else if (m.formadepesquisa == "Serviço")
        {
            <div class="m-3 form-group">
                <div class="form-inline">
                    <label for="nome">Serviço:</label>
                    <BlazoredTypeahead SearchMethod="ProcurarServicos" DisableClear="true" EnableDropDown="true" Disabled="@Readonly" oninput="this.value = this.value.toUpperCase()" @bind-Value="servicos" Placeholder="Pesquisar Serviço">
                        <SelectedTemplate>
                            @context.descricao
                        </SelectedTemplate>
                        <ResultTemplate>@context.codigo + @context.descricao</ResultTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>
        }
        else if (m.formadepesquisa == "Produtos")
        {
            <div class="m-3 form-group">
                <div class="form-inline">
                    <label for="nome">Produtos:</label>
                    <BlazoredTypeahead SearchMethod="ProcurarProdutos" DisableClear="true" EnableDropDown="true" Disabled="@Readonly" oninput="this.value = this.value.toUpperCase()" @bind-Value="produtos" Placeholder="Pesquisar Proutos">
                        <SelectedTemplate>
                            @context.idproduto + @context.descricao
                        </SelectedTemplate>
                        <ResultTemplate>@context.idproduto + @context.descricao</ResultTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>
        }
        else
        {
        }

        <div class="m-3 form-group">
            <div class="form-inline">
                <label for="datadeentrega">Colaborador:</label> &nbsp
                <BlazoredTypeahead SearchMethod="ProcurarColaboradores" DisableClear="true" EnableDropDown="true" Disabled="@Readonly" oninput="this.value = this.value.toUpperCase()" @bind-Value="cl" Placeholder="Pesquisar Colaborador">
                    <SelectedTemplate>
                        @context.codigo : @context.descricao
                    </SelectedTemplate>
                    <ResultTemplate>@context.codigo : @context.descricao</ResultTemplate>
                </BlazoredTypeahead>
            </div>
        </div>


        <EditForm Model="@m" OnValidSubmit="@AdicionarLista">
            <DataAnnotationsValidator />

            <div class="m-3 form-group">
                <div class="form-inline">
                    <label for="Quantidade">Quantidade:</label> &nbsp
                    <InputNumber autocomplete="false" id="Quantidade" style="-moz-appearance: textfield;" class="form-control" placeholder="Quantidade" disabled="@Readonly" @bind-Value="m.quantidade" />
                </div>
            </div>

            <div class="m-3 form-group">
                <div class="form-inline">
                    <label for="peso">Peso:</label> &nbsp
                    <InputNumber autocomplete="false" id="peso" style="-moz-appearance: textfield;" class="form-control" placeholder="Peso" disabled="@Readonly" @bind-Value="m.peso" />
                </div>
            </div>

            <div class="m-3 form-group">
                <div class="form-inline">
                    <label for="preco">Preco:</label> &nbsp
                    <InputNumber autocomplete="false" id="preco" style="-moz-appearance: textfield;" class="form-control" placeholder="@cl.valor" disabled="@Readonly" @bind-Value="m.preco" />
                </div>
            </div>

            <div class="m-3 form-group">
                <div class="form-inline">
                    <label for="apontamentos">Valor Total:</label> &nbsp
                    <InputNumber autocomplete="false" id="apontamentos" style="-moz-appearance: textfield;" class="form-control" placeholder="Valor total" disabled="@Readonly" @bind-Value="m.valortotal" />
                </div>
            </div>

            <div class="m-3 form-group">
                @if (save)
                {
                    <button type="submit" class="btn btn-primary">Editar</button>

                }
                else
                {
                    <button type="submit" class="btn btn-primary">Adicionar</button>
                }
            </div>
        </EditForm>
    </div>
</div>

<div class="container-fluid">
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Sumário da Encomenda</h6>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <div id="dataTable_wrapper" class="dataTables_wrapper dt-bootstrap4">
                    <div class="col-sm-12">
                        <table class="table table-bordered dataTable" id="dataTable" width="100%" cellspacing="0" role="grid" aria-describedby="dataTable_info" style="width: 100%;table-layout: fixed;">
                            <thead>
                                <tr role="row"><th class="sorting_asc" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-sort="ascending" aria-label="Name: activate to sort column descending" style="width: 90px;">Componente</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Position: activate to sort column ascending" style="width: 100px;">Colaborador</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Office: activate to sort column ascending" style="width: 71px;">Classificação</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Age: activate to sort column ascending" style="width: 31px;">Código</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Start date: activate to sort column ascending" style="width: 68px;">Descrição</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Start date: activate to sort column ascending" style="width: 30px;">Qtd.</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Start date: activate to sort column ascending" style="width: 30px;">Peso</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Salary: activate to sort column ascending" style="width: 30px;">Valor.Un.</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Start date: activate to sort column ascending" style="width: 30px;">Valor Total</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Start date: activate to sort column ascending" style="width: 68px;">Ações</th></tr>
                            </thead>
                            <tfoot>
                                <tr><th rowspan="1" colspan="1">Componente</th><th rowspan="1" colspan="1">Colaborador</th><th rowspan="1" colspan="1">Classificação</th><th rowspan="1" colspan="1">Código</th><th rowspan="1" colspan="1">Descrição</th><th rowspan="1" colspan="1">Qtd.</th><th rowspan="1" colspan="1">Peso</th><th rowspan="1" colspan="1">Valor.Un.</th><th rowspan="1" colspan="1">Valor Total</th><th rowspan="1" colspan="1">Ações</th></tr>
                            </tfoot>
                            <tbody>
                                @foreach (var modelo in listaModelos)
                                {
                                <tr style="height: 1em;">
                                    @if (modelo.idmolde.HasValue)
                                    {
                                        <td style="overflow: hidden; white-space: nowrap;" title="@modelo.idmolde">Molde</td>
                                        <td style="overflow: hidden; white-space: nowrap;" title="@modelo.idcolaborador">@modelo.idcolaborador</td>
                                        <td style="overflow: hidden; white-space: nowrap;" title="@modelo.idmolde">@modelo.idmolde</td>
                                        <td style="overflow: hidden; white-space: nowrap;" title="@modelo.codigo">@modelo.codigo</td>
                                        <td style="overflow: hidden; white-space: nowrap;" title="@modelo.descricao">@modelo.descricao</td>
                                        <td style="overflow: hidden; white-space: nowrap;" title="@modelo.quantidade">@modelo.quantidade</td>
                                        <td style="overflow: hidden; white-space: nowrap;" title="@modelo.peso">@modelo.peso</td>
                                        <td style="overflow: hidden; white-space: nowrap;" title="@modelo.preco">@cl.valor</td>
                                        <td style="overflow: hidden; white-space: nowrap;" title="@modelo.valortotal">@modelo.valortotal</td>
                                        <td><button class="btn btn-primary btn-sm" @onclick="() => AbrirModal(modelo.linha)" style="margin-left: 1rem"><i class="fas fa-pen"></i></button><button class="btn btn-danger btn-sm" @onclick="() => ApagarComposto(modelo.linha)" style="margin-left: 0.3rem"><i class="fas fa-trash"></i></button></td>


                                    }
                                    else if (modelo.idservico.HasValue)
                                    {
                                        <td style="overflow: hidden; white-space: nowrap;" title="@modelo.idservico">Servico</td>
                                        <td style="overflow: hidden; white-space: nowrap;" title="@modelo.idcolaborador">@modelo.idcolaborador</td>
                                        <td style="overflow: hidden; white-space: nowrap;" title="@modelo.idservico">@modelo.idservico</td>
                                        <td style="overflow: hidden; white-space: nowrap;" title="@modelo.codigo">@modelo.codigo</td>
                                        <td style="overflow: hidden; white-space: nowrap;" title="@modelo.descricao">@modelo.descricao</td>
                                        <td style="overflow: hidden; white-space: nowrap;" title="@modelo.quantidade">@modelo.quantidade</td>
                                        <td style="overflow: hidden; white-space: nowrap;" title="@modelo.peso">@modelo.peso</td>
                                        <td style="overflow: hidden; white-space: nowrap;" title="@cl.valor">@cl.valor</td>
                                        <td style="overflow: hidden; white-space: nowrap;" title="@modelo.valortotal">@modelo.valortotal</td>
                                        <td><button class="btn btn-primary btn-sm" @onclick="() => AbrirModal(modelo.linha)" style="margin-left: 1rem"><i class="fas fa-pen"></i></button><button class="btn btn-danger btn-sm" @onclick="() => ApagarComposto(modelo.linha)" style="margin-left: 0.3rem"><i class="fas fa-trash"></i></button></td>

                                    }
                                    else
                                    {
                                        <td style="overflow: hidden; white-space: nowrap;" title="@modelo.idproduto">Produto</td>
                                        <td style="overflow: hidden; white-space: nowrap;" title="@modelo.idcolaborador">@modelo.idcolaborador</td>
                                        <td style="overflow: hidden; white-space: nowrap;" title="@modelo.idproduto">@modelo.idproduto</td>
                                        <td style="overflow: hidden; white-space: nowrap;" title="@modelo.codigo">@modelo.codigo</td>
                                        <td style="overflow: hidden; white-space: nowrap;" title="@modelo.descricao">@modelo.descricao</td>
                                        <td style="overflow: hidden; white-space: nowrap;" title="@modelo.quantidade">@modelo.quantidade</td>
                                        <td style="overflow: hidden; white-space: nowrap;" title="@modelo.peso">@modelo.peso</td>
                                        <td style="overflow: hidden; white-space: nowrap;" title="@cl.valor">@cl.valor</td>
                                        <td style="overflow: hidden; white-space: nowrap;" title="@modelo.valortotal">@modelo.valortotal</td>
                                        <td><button class="btn btn-primary btn-sm" @onclick="() => AbrirModal(modelo.linha)" style="margin-left: 1rem"><i class="fas fa-pen"></i></button><button class="btn btn-danger btn-sm" @onclick="() => ApagarComposto(modelo.linha)" style="margin-left: 0.3rem"><i class="fas fa-trash"></i></button></td>

                                    }

                                </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <button type="button" @onclick="CriarEncomenda" class="btn btn-success">Criar Modelo</button>


    </div>
</div>



@code {
    // Invoking classes
    Data.Servicos servicos = new Servicos();
    Data.Moldes mlds = new Moldes();
    Data.CabecalhoProdutos produtos = new CabecalhoProdutos();
    Data.CabecalhosModelos cm = new CabecalhosModelos();
    Data.Modelos m = new Modelos();
    Data.Colaboradores cl = new Colaboradores();
    Data.TipoDePeca dtdp = new TipoDePeca();
    Data.TipoProduto dtp = new TipoProduto();



    //Invoking lists
    List<Servicos> ListaServicos = new List<Servicos>();
    List<CabecalhoProdutos> listaProdutos = new List<CabecalhoProdutos>();
    List<Moldes> listaMoldes = new List<Moldes>();
    List<TipoDePeca> listaTipoDePecas = new List<TipoDePeca>();
    List<TipoProduto> listaTipoProdutos = new List<TipoProduto>();
    List<Modelos> listaModelos = new List<Modelos>();
    List<Colaboradores> colaboradores = new List<Colaboradores>();



    //Utilitie Stuff
    bool Readonly = true;
    bool ReadonlyCabecalho = true;
    int i;
    string formadepesquisa;
    bool save = false;


    protected override async Task OnInitializedAsync()
    {

        //Cleaning Lists And Class Objects
        ListaServicos = new List<Servicos>();
        servicos = new Servicos();

        colaboradores = colaboradoresController.GetAll();
        listaMoldes = MoldesController.Get();
        listaTipoDePecas = TPC.GetAll();
        listaTipoProdutos = TPRC.GetAll();
        ListaServicos = SC.GetAll();
        listaProdutos = CAPC.GetAll();
        servicos.idservico = 0;
    }

    private async Task<IEnumerable<TipoDePeca>> ProcurarPecas(string searchText)
    {
        return await Task.FromResult(listaTipoDePecas.Where(h => h.codigo.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower()) || h.idpeca.ToString().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<Moldes>> ProcurarMoldes(string searchText)
    {
        return await Task.FromResult(listaMoldes.Where(h => h.codigo.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower()) || h.idmolde.ToString().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<Servicos>> ProcurarServicos(string searchText)
    {
        return await Task.FromResult(ListaServicos.Where(h => h.codigo.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<TipoProduto>> ProcurarTipoProdutos(string searchText)
    {
        return await Task.FromResult(listaTipoProdutos.Where(h => h.codigo.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<CabecalhoProdutos>> ProcurarProdutos(string searchText)
    {
        return await Task.FromResult(listaProdutos.Where(h => h.idproduto.ToString().ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<Colaboradores>> ProcurarColaboradores(string searchText)
    {
        return await Task.FromResult(colaboradores.Where(h => h.codigo.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
        m.preco = cl.valor;
    }

    //IFileListEntry file;
    //async Task HandleSelectedFile(IFileListEntry[] files)
    //{
    //    file = files.FirstOrDefault()
    //    if(file != null)
    //    {

    //    }
    //}


    public async Task EditarLista()
    {
        if (mlds.idmolde != 0)
        {
            m.idmolde = mlds.idmolde;
            m.descricao = mlds.descricao;
            m.codigo = mlds.codigo;
            m.idcolaborador = cl.idcolaborador;

            m.preco = cl.valor;

            listaModelos.RemoveAt(m.linha);
            listaModelos.Insert(m.linha,m);

            m = new Modelos();
            servicos = new Servicos();
            produtos = new CabecalhoProdutos();
            mlds = new Moldes();
            cl = new Colaboradores();

            save = false;


        }
        else if (servicos.idservico != 0)
        {
            m.preco = cl.valor;
            m.idcolaborador = cl.idcolaborador;
            m.idservico = servicos.idservico;
            m.descricao = servicos.descricao;
            m.codigo = servicos.codigo;

            listaModelos.RemoveAt(m.linha);
            listaModelos.Insert(m.linha, m);

            m = new Modelos();
            servicos = new Servicos();
            produtos = new CabecalhoProdutos();
            mlds = new Moldes();
            cl = new Colaboradores();

            save = false;

        }
        else if (produtos.idproduto != 0)
        {
            m.preco = cl.valor;
            m.idcolaborador = cl.idcolaborador;
            m.idproduto = produtos.idproduto;
            m.descricao = produtos.descricao;

            listaModelos.RemoveAt(m.linha);
            listaModelos.Insert(m.linha, m);

            m = new Modelos();
            servicos = new Servicos();
            produtos = new CabecalhoProdutos();
            mlds = new Moldes();
            cl = new Colaboradores();

            save = false;

        }
        else
        {
            await js.InvokeVoidAsync("alert", "Impossivél adicionar, por favor verifique os campos!");
        }
    }

    private async Task AdicionarLista()
    {
        if (mlds.idmolde != 0)
        {
            i++;

            m.linha = i;
            m.idmolde = mlds.idmolde;
            m.descricao = mlds.descricao;
            m.codigo = mlds.codigo;
            m.idcolaborador = cl.idcolaborador;

            m.preco = cl.valor;

            listaModelos.Add(m);

            m = new Modelos();
            servicos = new Servicos();
            produtos = new CabecalhoProdutos();
            mlds = new Moldes();
            cl = new Colaboradores();



        }
        else if (servicos.idservico != 0)
        {
            i++;

            m.linha = i;
            m.preco = cl.valor;
            m.idcolaborador = cl.idcolaborador;
            m.idservico = servicos.idservico;
            m.descricao = servicos.descricao;
            m.codigo = servicos.codigo;

            listaModelos.Add(m);

            m = new Modelos();
            servicos = new Servicos();
            produtos = new CabecalhoProdutos();
            mlds = new Moldes();
            cl = new Colaboradores();


        }
        else if (produtos.idproduto != 0)
        {
            i++;

            m.linha = i;
            m.preco = cl.valor;
            m.idcolaborador = cl.idcolaborador;
            m.idproduto = produtos.idproduto;
            m.descricao = produtos.descricao;

            listaModelos.Add(m);

            m = new Modelos();
            servicos = new Servicos();
            produtos = new CabecalhoProdutos();
            mlds = new Moldes();
            cl = new Colaboradores();


        }
        else
        {
            await js.InvokeVoidAsync("alert", "Impossivél adicionar, por favor verifique os campos!");
        }

    }

    public async Task CriarEncomenda()
    {
        if (listaModelos.Count != 0)
        {
            //Vai buscar o utilizador que está logado
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            cm.idtipoproduto = dtp.idtipoproduto;
            cm.idtipodepeca = dtdp.idpeca;
            cm.criadopor = user.Identity.Name;
            cm.datacriacao = DateTime.Now;


            var resultado = CMC.Post(cm);
            await Task.Delay(1000);

            for (int i = 0; i < listaModelos.Count; i++)
            {
                listaModelos[i].idmodelo = cm.idmodelo;
                MC.Post(listaModelos[i]);
            }

            m = new Modelos();
            servicos = new Servicos();
            produtos = new CabecalhoProdutos();
            mlds = new Moldes();
            cl = new Colaboradores();
            cm = new CabecalhosModelos();
            dtp = new TipoProduto();
            dtdp = new TipoDePeca();
            listaModelos = new List<Modelos>();
            Readonly = true;
            StateHasChanged();
            OnInitializedAsync();
        }
        else
        {
            await js.InvokeVoidAsync("alert", "Impossível criar o modelo, por favor, insira bem os dados do modelo!");
        }
    }

    public async Task AbrirModal(int linha)
    {
        m = listaModelos[linha - 1];

        if (mlds.idmolde != 0)
        {
            if (m.idmolde.HasValue)
            {
                mlds = MoldesController.Get(m.idmolde.Value);
            }
        }
        else if (servicos.idservico != 0)
        {
            if (m.idservico.HasValue)
            {
                servicos = SC.Get(m.idservico.Value);
            }
        }
        else if (produtos.idproduto != 0)
        {
            if (m.idproduto.HasValue)
            {
                produtos = CAPC.Get(m.idproduto.Value);
            }
        }
        else
        {
            await js.InvokeVoidAsync("alert", "Impossivél adicionar, por favor verifique os campos!");
        }

        save = true;
    }

    public async Task ApagarComposto(int linha)
    {
        listaModelos.RemoveAt(linha -1);
    }
}



