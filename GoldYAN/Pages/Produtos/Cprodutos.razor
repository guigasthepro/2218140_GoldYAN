@page "/cprodutos"
@using GoldYAN.Data
@inject IJSRuntime JsRuntime

<div class="container-fluid">
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Cabeçalho Produto</h6>
        </div>

        <div class="m-3 form-group">
            <div class="form-inline">
                <label for="nome">Modelo:</label>
                <BlazoredTypeahead SearchMethod="ProcurarModelos" PreventDefault="true" DisableClear="true" EnableDropDown="true" oninput="this.value = this.value.toUpperCase()" @bind-Value="cm" Placeholder="Pesquisar Serviço">
                    <SelectedTemplate>
                        @context.descricao
                    </SelectedTemplate>
                    <ResultTemplate>@context.idmodelo + @context.descricao</ResultTemplate>
                </BlazoredTypeahead>
            </div>
        </div>

        <EditForm Model="@CCP">
            <div class="m-3 form-group">
                <div class="form-inline">
                    <label for="Descricao">ID:</label> &nbsp
                    <InputNumber oninput="this.value = this.value.toUpperCase()"  id="Descricao" class="form-control" placeholder="Ainda não selecionado" @bind-Value="CCP.idproduto" />
                </div>
            </div>
            <div class="m-3 form-group">
                <div class="form-inline">
                    <label for="Descricao">Descrição:</label> &nbsp
                    <InputText oninput="this.value = this.value.toUpperCase()" id="Descricao" class="form-control" placeholder="Ainda não selecionado" @bind-Value="CCP.descricao" />
                </div>
            </div>
            <div class="m-3 form-group">
                <div class="form-inline">
                    <label for="Descricao">Descrição2:</label> &nbsp
                    <InputText oninput="this.value = this.value.toUpperCase()" id="Descricao" class="form-control" placeholder="Ainda não selecionado" @bind-Value="CCP.apontamentos" />
                </div>
            </div>
        </EditForm>

        <div class="m-3 form-group ">
            <div class="form-inline">
                <label for="nome" class="">Classificação de Produto:</label>
                <BlazoredTypeahead class="col-sm-5" DisableClear="true" EnableDropDown="true" SearchMethod="ProcurarClassificação" oninput="this.value = this.value.toUpperCase()" @bind-Value="ecp" Placeholder="Pesquisar classificação">
                    <SelectedTemplate>
                        @context.codigo (Desc: @context.descricao)
                    </SelectedTemplate>
                    <ResultTemplate>@context.codigo + @context.descricao </ResultTemplate>
                </BlazoredTypeahead>
            </div>
        </div>

        <div class="m-3 form-group ">
            <div class="form-inline">
                <label for="nome" class="">Unidades:</label>
                <BlazoredTypeahead class="col-sm-5" DisableClear="true" EnableDropDown="true" SearchMethod="ProcurarUnidades" oninput="this.value = this.value.toUpperCase()" @bind-Value="unidade" Placeholder="Pesquisar unidade">
                    <SelectedTemplate>
                        @context.indice (Desc: @context.descricao)
                    </SelectedTemplate>
                    <ResultTemplate>@context.indice + @context.descricao </ResultTemplate>
                </BlazoredTypeahead>
            </div>
        </div>


        <div class="m-3 form-group ">
            <div class="form-inline">
                <label for="nome" class="">Tipo de Produto:</label>
                <BlazoredTypeahead class="col-sm-5" DisableClear="true" EnableDropDown="true" SearchMethod="ProcurarTipoProdutos" oninput="this.value = this.value.toUpperCase()" @bind-Value="dtp" Placeholder="Pesquisar tipo de produto">
                    <SelectedTemplate>
                        @context.codigo (Desc: @context.descricao)
                    </SelectedTemplate>
                    <ResultTemplate>@context.codigo + @context.descricao </ResultTemplate>
                </BlazoredTypeahead>
            </div>
        </div>

        <div class="m-3 form-group ">
            <div class="form-inline">
                <label for="nome" class="">Tipo de Peça:</label>
                <BlazoredTypeahead class="" DisableClear="true" EnableDropDown="true" SearchMethod="ProcurarPecas" oninput="this.value = this.value.toUpperCase()" @bind-Value="dtdp" Placeholder="Pesquisar peça">
                    <SelectedTemplate>
                        @context.codigo (Desc: @context.descricao)
                    </SelectedTemplate>
                    <ResultTemplate> @context.codigo + @context.descricao </ResultTemplate>
                </BlazoredTypeahead>
            </div>
        </div>

        <div class="m-3 form-group ">
            <div class="form-inline">
                <label for="nome" class="">Fornecedor:</label>
                <BlazoredTypeahead class="" DisableClear="true" EnableDropDown="true" SearchMethod="ProcurarFornecedores" oninput="this.value = this.value.toUpperCase()" @bind-Value="fornecedores" Placeholder="Pesquisar peça">
                    <SelectedTemplate>
                        @context.idfornecedor (Desc: @context.nome)
                    </SelectedTemplate>
                    <ResultTemplate> @context.idfornecedor + @context.nome </ResultTemplate>
                </BlazoredTypeahead>
            </div>
        </div>

    </div>
</div>



<div class="container-fluid">
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary" style="display:inline;">Formulário Produtos</h6>
            @if (dtdp.idpeca == 0 || dtp.idtipoproduto == 0)
            {
                <h6 class="m-1 float-right text-danger" style="display: inline;">Preencha primeiro o cabeçalho do modelo!</h6>
            }
            else
            {
                Readonly = false;
            }

        </div>



        <EditForm Model="cp">
            <div class="m-3 form-group col-sm-5">
                <div class="form-inline">
                    <label for="Descricao">Componente:</label> &nbsp
                    <InputSelect @bind-Value="@cp.formadepesquisa">
                        <option selected>------</option>
                        <option>Serviço</option>
                        <option>Produtos</option>
                    </InputSelect>
                </div>
            </div>
        </EditForm>


        
        @if (cp.formadepesquisa == "Serviço")
        {
            <div class="m-3 form-group">
                <div class="form-inline">
                    <label for="nome">Serviço:</label>
                    <BlazoredTypeahead SearchMethod="ProcurarServicos" DisableClear="true" EnableDropDown="true" Disabled="@Readonly" oninput="this.value = this.value.toUpperCase()" @bind-Value="servicos" Placeholder="Pesquisar Serviço">
                        <SelectedTemplate>
                            @context.descricao
                        </SelectedTemplate>
                        <ResultTemplate>@context.codigo + @context.descricao</ResultTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>
        }
        else
        {
            @*<div class="m-3 form-group">
                <div class="form-inline">
                    <label for="nome">Produtos:</label>
                    <BlazoredTypeahead SearchMethod="ProcurarTipoProdutos" DisableClear="true" EnableDropDown="true" Disabled="@Readonly" oninput="this.value = this.value.toUpperCase()" @bind-Value="produtos" Placeholder="Pesquisar Serviço">
                        <SelectedTemplate>
                            @context.idproduto
                        </SelectedTemplate>
                        <ResultTemplate>@context.idtipoproduto + @context.descricao</ResultTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>*@
        }

        <EditForm Model="@cp" OnValidSubmit="AdicionarComposto">
            <DataAnnotationsValidator />

            <div class="m-3 form-group">
                <div class="form-inline">
                    <label for="Quantidade">Quantidade:</label> &nbsp
                    <InputNumber id="Quantidade" class="form-control" placeholder="Quantidade" disabled="@Readonly" @bind-Value="cp.quantidade" />
                </div>
            </div>

            <div class="m-3 form-group">
                <div class="form-inline">
                    <label for="peso">Peso:</label> &nbsp
                    <InputNumber id="peso" class="form-control" placeholder="Peso" disabled="@Readonly" @bind-Value="cp.peso" />
                </div>
            </div>

            <div class="m-3 form-group">
                <div class="form-inline">
                    <label for="preco">Preco:</label> &nbsp
                    <InputNumber id="preco" class="form-control" placeholder="@cl.valor" disabled="@Readonly" @bind-Value="cp.custo" />
                </div>
            </div>

            <div class="m-3 form-group">
                <div class="form-inline">
                    <label for="apontamentos">Valor Total:</label> &nbsp
                    <InputNumber id="apontamentos" class="form-control" placeholder="Apontamentos para o serviço" disabled="@Readonly" @bind-Value="cp.custototal" />
                </div>
            </div>

            @*<div class="m-3 form-group">
                    <div class="form-inline">
                        <label for="apontamentos">Imagem</label> &nbsp
                        <InputFile id="apontamentos" class="form-control" placeholder="Apontamentos para o serviço" disabled="@Readonly" @bind-Value="m.Image" />
                    </div>
                </div>*@

            <div class="m-3 form-group">
                <button type="submit" class="btn btn-primary">Adicionar</button>
            </div>

        </EditForm>
    </div>
</div>

<div class="container-fluid">
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Sumário da Encomenda</h6>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <div id="dataTable_wrapper" class="dataTables_wrapper dt-bootstrap4">
                    <div class="col-sm-12">
                        <table class="table table-bordered dataTable" id="dataTable" width="100%" cellspacing="0" role="grid" aria-describedby="dataTable_info" style="width: 100%;table-layout: fixed;">
                            <thead>
                                <tr role="row"><th class="sorting_asc" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-sort="ascending" aria-label="Name: activate to sort column descending" style="width: 90px;">Componente</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Position: activate to sort column ascending" style="width: 100px;">Colaborador</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Office: activate to sort column ascending" style="width: 71px;">Classificação</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Start date: activate to sort column ascending" style="width: 68px;">Descrição</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Start date: activate to sort column ascending" style="width: 30px;">Qtd.</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Start date: activate to sort column ascending" style="width: 30px;">Peso</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Salary: activate to sort column ascending" style="width: 30px;">Valor.Un.</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Start date: activate to sort column ascending" style="width: 30px;">Valor Total</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Start date: activate to sort column ascending" style="width: 68px;">Ações</th></tr>
                            </thead>
                            <tfoot>
                                <tr><th rowspan="1" colspan="1">Componente</th><th rowspan="1" colspan="1">Colaborador</th><th rowspan="1" colspan="1">Classificação</th><th rowspan="1" colspan="1">Descrição</th><th rowspan="1" colspan="1">Qtd.</th><th rowspan="1" colspan="1">Peso</th><th rowspan="1" colspan="1">Valor.Un.</th><th rowspan="1" colspan="1">Valor Total</th><th rowspan="1" colspan="1">Ações</th></tr>
                            </tfoot>
                            <tbody>
                                @foreach (var produto in LCP)
                                {
                                    <tr style="height: 1em;">
                                        @if (produto.idservico.HasValue)
                                        {
                                            <td style="overflow: hidden; white-space: nowrap;" title="@produto.idservico">Servico</td>
                                            <td style="overflow: hidden; white-space: nowrap;" title="@produto.idcolaborador">@produto.idcolaborador</td>
                                            <td style="overflow: hidden; white-space: nowrap;" title="@produto.idservico">@produto.idservico</td>
                                            <td style="overflow: hidden; white-space: nowrap;" title="@produto.descricao">@produto.descricao</td>
                                            <td style="overflow: hidden; white-space: nowrap;" title="@produto.quantidade">@produto.quantidade</td>
                                            <td style="overflow: hidden; white-space: nowrap;" title="@produto.peso">@produto.peso</td>
                                            <td style="overflow: hidden; white-space: nowrap;" title="@produto.custo">@produto.custo</td>
                                            <td style="overflow: hidden; white-space: nowrap;" title="@produto.custototal">@produto.custototal</td>
                                            <td><button class="btn btn-primary btn-sm" style="margin-left: 1rem">Editar</button><button class="btn btn-danger btn-sm" style="margin-left: 0.3rem">Apagar</button></td>

                                        }
                                        else
                                        {
                                            <td style="overflow: hidden; white-space: nowrap;" title="@produto.idproduto">Produto</td>
                                            <td style="overflow: hidden; white-space: nowrap;" title="@produto.idcolaborador">@produto.idcolaborador</td>
                                            <td style="overflow: hidden; white-space: nowrap;" title="@produto.idproduto">@produto.idproduto</td>
                                            <td style="overflow: hidden; white-space: nowrap;" title="@produto.descricao">@produto.descricao</td>
                                            <td style="overflow: hidden; white-space: nowrap;" title="@produto.quantidade">@produto.quantidade</td>
                                            <td style="overflow: hidden; white-space: nowrap;" title="@produto.peso">@produto.peso</td>
                                            <td style="overflow: hidden; white-space: nowrap;" title="@produto.custo">@produto.custo</td>
                                            <td style="overflow: hidden; white-space: nowrap;" title="@produto.custototal">@produto.custototal</td>
                                            <td><button class="btn btn-primary btn-sm" style="margin-left: 1rem">Editar</button><button class="btn btn-danger btn-sm" style="margin-left: 0.3rem">Apagar</button></td>

                                        }

                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <button type="button" @onclick="CriarProduto" class="btn btn-success">Criar Produto</button>


    </div>
</div>



@code {

    Data.CabecalhoProdutos CCP = new CabecalhoProdutos();
    Data.Servicos servicos = new Servicos();
    Data.Produtos produtos = new Produtos();
    Data.CabecalhosModelos cm = new CabecalhosModelos();
    Data.Colaboradores cl = new Colaboradores();
    Data.TipoDePeca dtdp = new TipoDePeca();
    Data.TipoProduto dtp = new TipoProduto();
    Data.Produtos cp = new Produtos();
    Data.Fornecedores fornecedores = new Data.Fornecedores();
    Data.ClassificacaoProdutos ecp = new Data.ClassificacaoProdutos();
    Data.Unidades unidade = new Data.Unidades();


    List<Unidades> listaUnidades = new List<Unidades>();
    List<ClassificacaoProdutos> listaClassificacaoProdutos = new List<ClassificacaoProdutos>();
    List<Fornecedores> listaFornecedores = new List<Fornecedores>();
    List<Servicos> ListaServicos = new List<Servicos>();
    List<TipoDePeca> listaTipoDePecas = new List<TipoDePeca>();
    List<TipoProduto> listaTipoProdutos = new List<TipoProduto>();
    List<Data.Produtos> listaProdutos = new List<Produtos>();
    List<CabecalhosModelos> listacabecalhoModeloControllers = new List<CabecalhosModelos>();
    List<Colaboradores> colaboradores = new List<Colaboradores>();

    //For input values
    List<Data.Produtos> LCP = new List<Produtos>();


    bool Readonly = true;
    bool ReadonlyCabecalho = true;
    int i;
    string formadepesquisa;

    protected override async Task OnInitializedAsync()
    {
        listaFornecedores = FC.GetAll();
        listacabecalhoModeloControllers = CMC.GetAll();
        listaClassificacaoProdutos = CPC.GetAll();
        listaUnidades = UC.GetAll();
        listaTipoDePecas = TPC.GetAll();
        listaTipoProdutos = TPRC.GetAll();
        ListaServicos = SC.GetAll();

    }

    public async Task CriarProduto()
    {
        if (LCP.Count != 0)
        {
            //Vai buscar o utilizador que está logado
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            CCP.idmodelo = cm.idmodelo;
            CCP.idclassificação = ecp.IDClassificacao;
            CCP.idunidade = unidade.idunidade;
            CCP.idtipodeproduto = dtp.idtipoproduto;
            CCP.idtipodepeca = dtdp.idpeca;


            var resultado = CAPC.Post(CCP);
            await Task.Delay(1000);

            for (int i = 0; i < LCP.Count; i++)
            {
                LCP[i].linha = i;
                LCP[i].idproduto = cp.idproduto;
                PC.Post(LCP[i]);
            }

            servicos = new Servicos();
            produtos = new Produtos();
            cl = new Colaboradores();
            CCP = new CabecalhoProdutos();
            cm = new CabecalhosModelos();
            dtp = new TipoProduto();
            dtdp = new TipoDePeca();
            LCP = new List<Produtos>();
            Readonly = true;
            StateHasChanged();
            OnInitializedAsync();
        }
        else
        {
            await js.InvokeVoidAsync("alert", "Impossível criar a encomenda, por favor, insira bem os dados da encomenda!");
        }
    }

    public async Task AdicionarComposto()
    {

        if (servicos.idservico != 0)
        {
            i++;
            cp.linha = i;
            cp.custo = cl.valor;
            cp.idcolaborador = cl.idcolaborador;
            cp.idservico = servicos.idservico;
            cp.descricao = servicos.descricao;
            cp.datacriacao = DateTime.Now.ToString();

            LCP.Add(cp);

            cm = new CabecalhosModelos();
            servicos = new Servicos();
            produtos = new Produtos();
            cl = new Colaboradores();


        }
        else if (produtos.idproduto != 0)
        {
            i++;
            cp.linha = i;
            cp.custo = cl.valor;
            cp.idcolaborador = cl.idcolaborador;
            cp.idproduto = produtos.idproduto;
            cp.descricao = produtos.descricao;
            cp.datacriacao = DateTime.Now.ToString();

            LCP.Add(cp);

            cm = new CabecalhosModelos();
            servicos = new Servicos();
            produtos = new Produtos();
            cl = new Colaboradores();


        }
        else
        {
            await js.InvokeVoidAsync("alert", "Impossivél adicionar, por favor verifique os campos!");
        }

    }

    public async Task EditarComposto(int linha)
    {
        LCP.RemoveAt(linha-1);
        LCP.Insert(linha-1, cp);
    }

    public async Task ApagarComposto(int linha)
    {
        LCP.Remove(listaProdutos[linha-1]);
    }

    private async Task<IEnumerable<Unidades>> ProcurarUnidades(string searchText)
    {
        return await Task.FromResult(listaUnidades.Where(h => h.indice.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<ClassificacaoProdutos>> ProcurarClassificação(string searchText)
    {
        return await Task.FromResult(listaClassificacaoProdutos.Where(h => h.codigoat.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<TipoDePeca>> ProcurarPecas(string searchText)
    {
        return await Task.FromResult(listaTipoDePecas.Where(h => h.codigo.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower()) || h.idpeca.ToString().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<Fornecedores>> ProcurarFornecedores(string searchText)
    {
        return await Task.FromResult(listaFornecedores.Where(h => h.contacto.ToLower().Contains(searchText.ToLower()) || h.nome.ToLower().Contains(searchText.ToLower()) || h.nomevendedor.ToString().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<Servicos>> ProcurarServicos(string searchText)
    {
        return await Task.FromResult(ListaServicos.Where(h => h.codigo.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<TipoProduto>> ProcurarTipoProdutos(string searchText)
    {
        return await Task.FromResult(listaTipoProdutos.Where(h => h.codigo.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
    }

    //private async Task<IEnumerable<CabecalhoProdutos>> ProcurarProdutos(string searchText)
    //{
    //    return await Task.FromResult(listaProdutos.Where(h => h..ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
    //}

    private async Task<IEnumerable<Colaboradores>> ProcurarColaboradores(string searchText)
    {
        return await Task.FromResult(colaboradores.Where(h => h.codigo.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<CabecalhosModelos>> ProcurarModelos(string searchText)
    {
        return await Task.FromResult(listacabecalhoModeloControllers.Where(h => h.idmodelo.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
    }


}