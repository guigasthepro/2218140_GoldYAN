@page "/cprodutos"
@using GoldYAN.Data
@inject IJSRuntime JsRuntime
@attribute [Authorize(Roles = "Admin, Dev, Contabilidade")]

<div class="container-fluid">
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Cabeçalho Produto</h6>
        </div>

        <div class="m-3 form-group">
            <div class="form-inline">
                <label for="nome">Modelo:</label>
                <BlazoredTypeahead SearchMethod="ProcurarModelos" PreventDefault="true" DisableClear="true" EnableDropDown="true" oninput="this.value = this.value.toUpperCase()" @bind-Value="cm" Placeholder="Pesquisar Modelo">
                    <SelectedTemplate>
                        @context.descricao
                    </SelectedTemplate>
                    <ResultTemplate>
                        @context.idmodelo + @context.descricao
                    </ResultTemplate>
                </BlazoredTypeahead>
            </div>
            <button class="btn btn-primary btn-sm" @onclick="LoadModeloData"><i class="fas fa-check"></i></button>
        </div>

        <EditForm Model="@CCP">
            <div class="m-3 form-group">
                <div class="form-inline">
                    <label for="Descricao">Descrição:</label> &nbsp
                    <InputText autocomplete="false" oninput="this.value = this.value.toUpperCase()" id="Descricao" class="form-control" placeholder="Descrição do produto" @bind-Value="CCP.descricao" />
                </div>
            </div>
        </EditForm>

        <div class="m-3 form-group ">
            <div class="form-inline">
                <label for="nome" class="">Classificação de Produto:</label>
                <BlazoredTypeahead class="col-sm-5" DisableClear="true" EnableDropDown="true" SearchMethod="ProcurarClassificação" oninput="this.value = this.value.toUpperCase()" @bind-Value="ecp" Placeholder="Pesquisar classificação">
                    <SelectedTemplate>
                        @context.codigo (Desc: @context.descricao)
                    </SelectedTemplate>
                    <ResultTemplate>@context.codigo + @context.descricao </ResultTemplate>
                </BlazoredTypeahead>
            </div>
        </div>

        <div class="m-3 form-group ">
            <div class="form-inline">
                <label for="nome" class="">Unidades:</label>
                <BlazoredTypeahead class="col-sm-5" DisableClear="true" EnableDropDown="true" SearchMethod="ProcurarUnidades" oninput="this.value = this.value.toUpperCase()" @bind-Value="unidade" Placeholder="Pesquisar unidade">
                    <SelectedTemplate>
                        @context.indice (Desc: @context.descricao)
                    </SelectedTemplate>
                    <ResultTemplate>@context.indice + @context.descricao </ResultTemplate>
                </BlazoredTypeahead>
            </div>
        </div>


        <div class="m-3 form-group ">
            <div class="form-inline">
                <label for="nome" class="">Tipo de Produto:</label>
                <BlazoredTypeahead class="col-sm-5" DisableClear="true" EnableDropDown="true" SearchMethod="ProcurarTipoProdutos" oninput="this.value = this.value.toUpperCase()" @bind-Value="dtp" Placeholder="Pesquisar tipo de produto">
                    <SelectedTemplate>
                        @context.codigo (Desc: @context.descricao)
                    </SelectedTemplate>
                    <ResultTemplate>@context.codigo + @context.descricao </ResultTemplate>
                </BlazoredTypeahead>
            </div>
        </div>

        <div class="m-3 form-group ">
            <div class="form-inline">
                <label for="nome" class="">Tipo de Peça:</label>
                <BlazoredTypeahead class="" DisableClear="true" EnableDropDown="true" SearchMethod="ProcurarPecas" oninput="this.value = this.value.toUpperCase()" @bind-Value="dtdp" Placeholder="Pesquisar peça">
                    <SelectedTemplate>
                        @context.codigo (Desc: @context.descricao)
                    </SelectedTemplate>
                    <ResultTemplate> @context.codigo + @context.descricao </ResultTemplate>
                </BlazoredTypeahead>
            </div>
        </div>

        <div class="m-3 form-group ">
            <div class="form-inline">
                <label for="nome" class="">Fornecedor:</label>
                <BlazoredTypeahead class="" DisableClear="true" EnableDropDown="true" SearchMethod="ProcurarFornecedores" oninput="this.value = this.value.toUpperCase()" @bind-Value="fornecedores" Placeholder="Pesquisar fornecedores">
                    <SelectedTemplate>
                        @context.codigo (Desc: @context.nome)
                    </SelectedTemplate>
                    <ResultTemplate> @context.codigo + @context.nome </ResultTemplate>
                </BlazoredTypeahead>
            </div>
        </div>
        <button type="button" @onclick="CriarProduto" class="btn btn-success"><i class="fas fa-plus"></i>&nbsp;Criar Produto</button>
    </div>
</div>






@code {

    Data.CabecalhoProdutos CCP = new CabecalhoProdutos();
    Data.Servicos servicos = new Servicos();
    Data.Produtos produtos = new Produtos();
    Data.CabecalhosModelos cm = new CabecalhosModelos();
    Data.Colaboradores cl = new Colaboradores();
    Data.TipoDePeca dtdp = new TipoDePeca();
    Data.TipoProduto dtp = new TipoProduto();
    Data.Produtos cp = new Produtos();
    Data.Fornecedores fornecedores = new Data.Fornecedores();
    Data.ClassificacaoProdutos ecp = new Data.ClassificacaoProdutos();
    Data.Unidades unidade = new Data.Unidades();


    List<Unidades> listaUnidades = new List<Unidades>();
    List<ClassificacaoProdutos> listaClassificacaoProdutos = new List<ClassificacaoProdutos>();
    List<Fornecedores> listaFornecedores = new List<Fornecedores>();
    List<Servicos> ListaServicos = new List<Servicos>();
    List<TipoDePeca> listaTipoDePecas = new List<TipoDePeca>();
    List<TipoProduto> listaTipoProdutos = new List<TipoProduto>();
    List<Data.Produtos> listaProdutos = new List<Produtos>();
    List<CabecalhosModelos> listacabecalhoModeloControllers = new List<CabecalhosModelos>();
    List<Colaboradores> colaboradores = new List<Colaboradores>();
    List<CabecalhoProdutos> listaCProdutos = new List<CabecalhoProdutos>();


    //For input values
    List<Data.Produtos> LCP = new List<Produtos>();

    protected override async Task OnInitializedAsync()
    {
        listaFornecedores = FC.GetAll();
        listacabecalhoModeloControllers = CMC.GetAll();
        listaClassificacaoProdutos = CPC.GetAll();
        listaUnidades = UC.GetAll();
        listaTipoDePecas = TPC.GetAll();
        listaTipoProdutos = TPRC.GetAll();
        ListaServicos = SC.GetAll();
        listaCProdutos = CAPC.GetAll();

    }

    public async Task CriarProduto()
    {

        //Vai buscar o utilizador que está logado
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        CCP.idmodelo = cm.idmodelo;
        CCP.idclassificação = ecp.IDClassificacao;
        CCP.idunidade = unidade.idunidade;
        CCP.idtipodeproduto = dtp.idtipoproduto;
        CCP.idtipodepeca = dtdp.idpeca;
        CCP.idfornecedor = fornecedores.idfornecedor;

        var resultado = CAPC.Post(CCP);
        await Task.Delay(1000);

        if (resultado != null)
        {
            js.InvokeVoidAsync("Alert", "Cabecalho do produto criado com sucesso!");
        }

        servicos = new Servicos();
        produtos = new Produtos();
        cl = new Colaboradores();
        CCP = new CabecalhoProdutos();
        cm = new CabecalhosModelos();
        dtp = new TipoProduto();
        dtdp = new TipoDePeca();
        LCP = new List<Produtos>();

        StateHasChanged();
        OnInitializedAsync();

    }



    public async Task LoadModeloData()
    {
        if (cm.idmodelo.Length > 0)
        {
            var res = CMC.Get(cm.idmodelo);
            dtdp = TPC.Get(res.idtipodepeca.Value);
            dtp = TPRC.Get(res.idtipoproduto.Value);
            CCP.descricao = res.descricao;
        }
    }


    private async Task<IEnumerable<Unidades>> ProcurarUnidades(string searchText)
    {
        return await Task.FromResult(listaUnidades.Where(h => h.indice.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<ClassificacaoProdutos>> ProcurarClassificação(string searchText)
    {
        return await Task.FromResult(listaClassificacaoProdutos.Where(h => h.codigoat.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<TipoDePeca>> ProcurarPecas(string searchText)
    {
        return await Task.FromResult(listaTipoDePecas.Where(h => h.codigo.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower()) || h.idpeca.ToString().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<Fornecedores>> ProcurarFornecedores(string searchText)
    {
        return await Task.FromResult(listaFornecedores.Where(h => h.codigo.ToLower().Contains(searchText.ToLower()) || h.nome.ToLower().Contains(searchText.ToLower()) || h.nomevendedor.ToString().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<Servicos>> ProcurarServicos(string searchText)
    {
        return await Task.FromResult(ListaServicos.Where(h => h.codigo.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<TipoProduto>> ProcurarTipoProdutos(string searchText)
    {
        return await Task.FromResult(listaTipoProdutos.Where(h => h.codigo.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<CabecalhoProdutos>> ProcurarProdutos(string searchText)
    {
        return await Task.FromResult(listaCProdutos.Where(h => h.descricao.ToLower().Contains(searchText.ToLower()) || h.idproduto.Equals(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<Colaboradores>> ProcurarColaboradores(string searchText)
    {
        return await Task.FromResult(colaboradores.Where(h => h.codigo.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<CabecalhosModelos>> ProcurarModelos(string searchText)
    {
        return await Task.FromResult(listacabecalhoModeloControllers.Where(h => h.idmodelo.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
    }


}