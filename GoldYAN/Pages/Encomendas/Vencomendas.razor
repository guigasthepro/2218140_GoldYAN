@page "/vencomendas"
@using GoldYAN.Controller
@using GoldYAN.Data

@using Microsoft.EntityFrameworkCore.Internal
@inject IJSRuntime JsRuntime
@inject ClientesController CC
@inject ServicosController SC
@inject EncomendasController EC
@inject CabecalhoController CEC
@attribute [Authorize(Roles = "Admin, Dev, Atendimento, Contabilidade")]





@if (showModal)
{
    <div class="modal fade show" id="myModal" style="display:block ;background-color:rgba(128, 128, 128, 0.5);" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title">Lançar Localização</h4>
                    <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">

                    <div class="form-row p-sm-1">
                        <label for="nome" class="col-sm-auto col-form-label">Localizacao:</label>
                        <div class="col-sm-5">
                            <BlazoredTypeahead SearchMethod="ProcurarLocalizacao" PreventDefault="true" DisableClear="true" EnableDropDown="true" oninput="this.value = this.value.toUpperCase()" @bind-Value="localizacao" Placeholder="Pesquisar localização">
                                <SelectedTemplate>
                                    @context.idlocalizacao (ID: @context.descricao)
                                </SelectedTemplate>
                                <ResultTemplate>@context.idlocalizacao (ID: @context.descricao)</ResultTemplate>
                            </BlazoredTypeahead>
                        </div>
                    </div>

                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="ModalCancel" data-dismiss="modal">Cancelar</button>
                    <button type="button" @onclick="LancarLocalizacao" class="btn btn-primary">Lancar</button>
                </div>

            </div>
        </div>
    </div>}

@if (showModal2)
{
    <div class="modal fade show" id="myModal" style="display:block;background-color:rgba(128, 128, 128, 0.5);" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title">Lançar Estado</h4>
                    <button type="button" class="close" @onclick="@ModalCancel2">&times;</button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">

                    <div class="form-row p-sm-1">
                        <label for="nome" class="col-sm-auto col-form-label">Estado:</label>
                        <div class="col-sm-5">
                            <BlazoredTypeahead SearchMethod="ProcurarEstado" PreventDefault="true" DisableClear="true" EnableDropDown="true" oninput="this.value = this.value.toUpperCase()" @bind-Value="estado" Placeholder="Pesquisar estado">
                                <SelectedTemplate>
                                    @context.idestados (ID: @context.descricao)
                                </SelectedTemplate>
                                <ResultTemplate>@context.idestados (ID: @context.descricao)</ResultTemplate>
                            </BlazoredTypeahead>
                        </div>
                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="ModalCancel2" data-dismiss="modal">Cancelar</button>
                    <button type="submit" @onclick="LancarEstado" class="btn btn-primary">Lancar</button>
                </div>
            </div>
        </div>
    </div>
}

@if (showModal3)
{
    <div class="modal fade show" id="myModal" style="display:block; position:fixed; overflow-y:auto; ;background-color:rgba(128, 128, 128, 0.5);" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered modal-xl">
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title">Lançar Fabrico</h4>
                    <button type="button" class="close" @onclick="@ModalCancel3">&times;</button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">

                    <div class="container-fluid">
                        <div class="card shadow mb-4">
                            <div class="card-header py-3">
                                <h6 style="display: inline" class="m-0 font-weight-bold text-primary">Cabeçalho Encomenda</h6>
                            </div>
                            <EditForm Model="@CF">
                                <div class="m-3 form-group">
                                    <div class="form-inline w-auto">
                                        <label for="Descricao">Encomenda:</label> &nbsp
                                        <InputText autocomplete="false" oninput="this.value = this.value.toUpperCase()" id="Descricao" disabled="true" class="form-control" style="width:120px" placeholder="" @bind-Value="idencomendaselecionada" />
                                    </div>
                                </div>
                                <div class="m-3 form-group">
                                    <div class="form-inline w-100">
                                        <label for="Descricao">Descrição:</label> &nbsp
                                        <InputText autocomplete="false" oninput="this.value = this.value.toUpperCase()" id="Descricao" disabled="true" class="form-control w-50" placeholder="" @bind-Value="detalhencomenda.apontamentos" />
                                    </div>
                                </div>
                                <div class="m-3 form-group">
                                    <div class="form-inline">
                                        <label for="Descricao">Data Entrega:</label> &nbsp
                                        <InputText autocomplete="false" oninput="this.value = this.value.toUpperCase()" id="Descricao" disabled="true" class="form-control" placeholder="" @bind-Value="detalhencomenda.datadeentrega" />
                                    </div>
                                </div>
                            </EditForm>
                        </div>
                    </div>

                    <div class="container-fluid">
                        <div class="card shadow mb-4">
                            <div class="card-header py-3">
                                <h6 style="display: inline" class="m-0 font-weight-bold text-primary">Cabeçalho Fabrico</h6>
                            </div>
                            <EditForm Model="@CF">
                                <div class="m-3 form-group">
                                    <div class="form-inline">
                                        <label for="Descricao">Data Transação:</label> &nbsp
                                        <InputText autocomplete="false" oninput="this.value = this.value.toUpperCase()" id="Descricao" disabled="true" class="form-control" placeholder="Ainda não selecionado" @bind-Value="CF.datacriacao" />
                                    </div>
                                </div>
                            </EditForm>
                        </div>
                    </div>

                    <div class="container-fluid">
                        <div class="card shadow mb-4">
                            <div class="card-header py-3">
                                <h6 style="display: inline" class="m-0 font-weight-bold text-primary">Cabeçalho Produto</h6>
                            </div>


                            <EditForm Model="@CCP">
                                <div class="m-3 form-group">
                                    <div class="form-inline">
                                        <label for="Descricao">Descrição:</label> &nbsp
                                        <InputText oninput="this.value = this.value.toUpperCase()" id="Descricao" class="form-control" placeholder="Descrição do produto" @bind-Value="CCP.descricao" />
                                    </div>
                                </div>
                            </EditForm>
                            <div class="m-3 form-group ">
                                <div class="form-inline">
                                    <label for="nome" class="">Classificação de Produto:</label>
                                    <BlazoredTypeahead class="col-sm-5" DisableClear="true" EnableDropDown="true" SearchMethod="ProcurarClassificação" oninput="this.value = this.value.toUpperCase()" @bind-Value="ecp" Placeholder="Pesquisar classificação">
                                        <SelectedTemplate>
                                            @context.codigo (Desc: @context.descricao)
                                        </SelectedTemplate>
                                        <ResultTemplate>@context.codigo + @context.descricao </ResultTemplate>
                                    </BlazoredTypeahead>
                                </div>
                            </div>

                            <div class="m-3 form-group ">
                                <div class="form-inline">
                                    <label for="nome" class="">Tipo de Produto:</label>
                                    <BlazoredTypeahead class="col-sm-5" DisableClear="true" EnableDropDown="true" SearchMethod="ProcurarTipoProdutos" oninput="this.value = this.value.toUpperCase()" @bind-Value="dtp" Placeholder="Pesquisar tipo de produto">
                                        <SelectedTemplate>
                                            @context.codigo (Desc: @context.descricao)
                                        </SelectedTemplate>
                                        <ResultTemplate>@context.codigo + @context.descricao </ResultTemplate>
                                    </BlazoredTypeahead>
                                </div>
                            </div>

                            <div class="m-3 form-group ">
                                <div class="form-inline">
                                    <label for="nome" class="">Tipo de Peça:</label>
                                    <BlazoredTypeahead class="" DisableClear="true" EnableDropDown="true" SearchMethod="ProcurarPecas" oninput="this.value = this.value.toUpperCase()" @bind-Value="dtdp" Placeholder="Pesquisar peça">
                                        <SelectedTemplate>
                                            @context.codigo (Desc: @context.descricao)
                                        </SelectedTemplate>
                                        <ResultTemplate> @context.codigo + @context.descricao </ResultTemplate>
                                    </BlazoredTypeahead>
                                </div>
                            </div>
                            <div class="m-3 form-group ">
                                <div class="form-inline">
                                    <label for="nome" class="">Fornecedor:</label>
                                    <BlazoredTypeahead class="" DisableClear="true" EnableDropDown="true" SearchMethod="ProcurarFornecedores" oninput="this.value = this.value.toUpperCase()" @bind-Value="fornecedores" Placeholder="Pesquisar fornecedor">
                                        <SelectedTemplate>
                                            @context.codigo (Desc: @context.nome)
                                        </SelectedTemplate>
                                        <ResultTemplate> @context.codigo + @context.nome </ResultTemplate>
                                    </BlazoredTypeahead>
                                </div>
                            </div>

                            <div class="m-3 form-group ">
                                <div class="form-inline">
                                    <label for="nome" class="">Unidades:</label>
                                    <BlazoredTypeahead class="col-sm-5" DisableClear="true" EnableDropDown="true" SearchMethod="ProcurarUnidades" oninput="this.value = this.value.toUpperCase()" @bind-Value="unidade" Placeholder="Pesquisar unidade">
                                        <SelectedTemplate>
                                            @context.indice (Desc: @context.descricao)
                                        </SelectedTemplate>
                                        <ResultTemplate>@context.indice + @context.descricao </ResultTemplate>
                                    </BlazoredTypeahead>
                                </div>
                            </div>

                            <EditForm Model="@CCP">

                                <div class="m-3 form-group">
                                    <div class="form-inline">
                                        <label for="Descricao">Quantidade:</label> &nbsp
                                        <InputNumber oninput="this.value = this.value.toUpperCase()" id="Descricao" class="form-control" placeholder="Quantidade do produto" @bind-Value="CCP.updatestock" />
                                    </div>
                                </div>
                                <div class="m-3 form-group">
                                    <div class="form-inline">
                                        <label for="Descricao">Feitio:</label> &nbsp
                                        <InputNumber oninput="this.value = this.value.toUpperCase()" id="Descricao" class="form-control" placeholder="Feitio do produto" @bind-Value="CCP.feitiopeca" />
                                    </div>
                                </div>
                                <div class="m-3 form-group">
                                    <div class="form-inline">
                                        <label for="Descricao">Margem:</label> &nbsp
                                        <InputNumber oninput="this.value = this.value.toUpperCase()" id="Descricao" class="form-control" placeholder="Margem do produto" @bind-Value="CCP.margem" />
                                    </div>
                                </div>

                            </EditForm>


                        </div>
                    </div>



                    <div class="container-fluid">
                        <div class="card shadow mb-4">
                            <div class="card-header py-3">
                                <h6 class="m-0 font-weight-bold text-primary" style="display:inline;">Formulário Produtos</h6>
                                @if (dtdp.idpeca == 0 || dtp.idtipoproduto == 0)
                                {
                                    <h6 class="m-1 float-right text-danger" style="display: inline;">Preencha primeiro o cabeçalho do modelo!</h6>
                                }
                                else
                                {
                                    Readonly = false;
                                }

                            </div>

                            <EditForm Model="cp">
                                <div class="m-3 form-group col-sm-5">
                                    <div class="form-inline">
                                        <label for="Descricao">Componente:</label> &nbsp
                                        <InputSelect @bind-Value="@cp.formadepesquisa">
                                            <option>Serviço</option>
                                            <option selected>Produtos</option>
                                        </InputSelect>
                                    </div>
                                </div>
                            </EditForm>


                            @if (cp.formadepesquisa == "Serviço")
                            {
                                <div class="m-3 form-group">
                                    <div class="form-inline">
                                        <label for="nome">Serviço:</label>
                                        <BlazoredTypeahead SearchMethod="ProcurarServicos" DisableClear="true" EnableDropDown="true" Disabled="@Readonly" oninput="this.value = this.value.toUpperCase()" @bind-Value="servicos" Placeholder="Pesquisar Serviço">
                                            <SelectedTemplate>
                                                @context.descricao
                                            </SelectedTemplate>
                                            <ResultTemplate>@context.codigo + @context.descricao</ResultTemplate>
                                        </BlazoredTypeahead>
                                    </div>
                                </div>
                                <div class="m-3 form-group">
                                    <div class="form-inline">
                                        <label for="nome">Colaborador:</label>
                                        <BlazoredTypeahead SearchMethod="ProcurarColaboradores" DisableClear="true" EnableDropDown="true" Disabled="@Readonly" oninput="this.value = this.value.toUpperCase()" @bind-Value="cl" Placeholder="Pesquisar Colaborador">
                                            <SelectedTemplate>
                                                @context.descricao
                                            </SelectedTemplate>
                                            <ResultTemplate>@context.codigo + @context.descricao</ResultTemplate>
                                        </BlazoredTypeahead>
                                    </div>
                                </div>

                                <EditForm Model="@cp" OnValidSubmit="AdicionarComposto">
                                    <DataAnnotationsValidator />

                                    <div class="m-3 form-group">
                                        <div class="form-inline">
                                            <label for="Descricao">Preço:</label> &nbsp
                                            <InputNumber autocomplete="false" oninput="this.value = this.value.toUpperCase()" style="-moz-appearance: textfield;" id="Descricao" disabled="@Readonly" class="form-control" placeholder="Peso do produto" @bind-Value="cl.valor" />
                                        </div>
                                    </div>
                                </EditForm>

                            }
                            else
                            {
                                <div class="m-3 form-group">
                                    <div class="form-inline">
                                        <label for="nome">Produtos:</label>
                                        <BlazoredTypeahead SearchMethod="ProcurarProdutos" DisableClear="true" EnableDropDown="true" Disabled="@Readonly" oninput="this.value = this.value.toUpperCase()" @bind-Value="produtos" Placeholder="Pesquisar produto">
                                            <SelectedTemplate>
                                                @context.idproduto + @context.descricao
                                            </SelectedTemplate>
                                            <ResultTemplate>@context.idproduto + @context.descricao</ResultTemplate>
                                        </BlazoredTypeahead>
                                    </div>
                                </div>
                            }

                            <EditForm Model="@cp" OnValidSubmit="AdicionarComposto">
                                <DataAnnotationsValidator />

                                <div class="m-3 form-group">
                                    <div class="form-inline">
                                        <label for="Descricao">Quantidade:</label> &nbsp
                                        <InputNumber autocomplete="false" oninput="this.value = this.value.toUpperCase()" style="-moz-appearance: textfield;" id="Descricao" disabled="@Readonly" class="form-control" placeholder="Quantidade comprada" @bind-Value="cp.quantidade" />
                                    </div>
                                </div>
                            </EditForm>
                            @if (save)
                            {
                                <div class="m-3 form-group">
                                    <button type="submit" @onclick="EditarComposto" class="btn btn-primary">Editar</button>
                                </div>
                            }
                            else
                            {
                                <div class="m-3 form-group">
                                    <button type="submit" @onclick="AdicionarComposto" class="btn btn-primary">Adicionar</button>
                                </div>
                            }

                        </div>
                    </div>

                    <div class="container-fluid">
                        <div class="card shadow mb-4">
                            <div class="card-header py-3">
                                <h6 class="m-0 font-weight-bold text-primary">Sumário da Encomenda</h6>
                            </div>
                            <div class="card-body">
                                <div class="table-responsive">
                                    <div id="dataTable_wrapper" class="dataTables_wrapper dt-bootstrap4">
                                        <div class="col-sm-12">
                                            <table class="table table-bordered dataTable" id="dataTable" width="100%" cellspacing="0" role="grid" aria-describedby="dataTable_info" style="width: 100%;table-layout: fixed;">
                                                <thead>
                                                    <tr role="row"><th class="sorting_asc" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-sort="ascending" aria-label="Name: activate to sort column descending" style="width: 90px;">Componente</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Position: activate to sort column ascending" style="width: 100px;">Colaborador</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Office: activate to sort column ascending" style="width: 71px;">Classificação</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Start date: activate to sort column ascending" style="width: 68px;">Descrição</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Start date: activate to sort column ascending" style="width: 30px;">Qtd.</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Start date: activate to sort column ascending" style="width: 30px;">Peso</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Salary: activate to sort column ascending" style="width: 30px;">Valor.Un.</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Start date: activate to sort column ascending" style="width: 30px;">Valor Total</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Start date: activate to sort column ascending" style="width: 68px;">Ações</th></tr>
                                                </thead>
                                                <tfoot>
                                                    <tr><th rowspan="1" colspan="1">Componente</th><th rowspan="1" colspan="1">Colaborador</th><th rowspan="1" colspan="1">Classificação</th><th rowspan="1" colspan="1">Descrição</th><th rowspan="1" colspan="1">Qtd.</th><th rowspan="1" colspan="1">Peso</th><th rowspan="1" colspan="1">Valor.Un.</th><th rowspan="1" colspan="1">Valor Total</th><th rowspan="1" colspan="1">Ações</th></tr>
                                                </tfoot>
                                                <tbody>
                                                    @for (int i = 0; i < LCP.Count; i++)
                                                    {
                                                        <tr style="height: 1em;">
                                                            @if (LCP[i].idservico.HasValue)
                                                            {
                                                                <td style="overflow: hidden; white-space: nowrap;" title="@LCP[i].idservico">Servico</td>
                                                                <td style="overflow: hidden; white-space: nowrap;" title="@LCP[i].idcolaborador">@LCP[i].idcolaborador</td>
                                                                <td style="overflow: hidden; white-space: nowrap;" title="@LCP[i].idservico">@LCP[i].idservico</td>
                                                                <td style="overflow: hidden; white-space: nowrap;" title="@LCP[i].descricao">@LCP[i].descricao</td>
                                                                <td style="overflow: hidden; white-space: nowrap;" title="@LCP[i].quantidade">@LCP[i].quantidade</td>
                                                                <td style="overflow: hidden; white-space: nowrap;" title="@LCP[i].peso">@LCP[i].peso</td>
                                                                <td style="overflow: hidden; white-space: nowrap;" title="@LCP[i].custo">@LCP[i].custo</td>
                                                                <td style="overflow: hidden; white-space: nowrap;" title="@LCP[i].custototal">@LCP[i].custototal</td>
                                                                <td><button class="btn btn-primary btn-sm" @onclick="() => LoadData(i)" style="margin-left: 1rem"><i class="fas fa-pen"></i></button><button @onclick="() => ApagarItemLista(i)" class="btn btn-danger btn-sm" style="margin-left: 0.3rem"><i class="fas fa-trash"></i></button></td>

                                                            }
                                                            else
                                                            {
                                                                <td style="overflow: hidden; white-space: nowrap;" title="@LCP[i].idproduto">Produto</td>
                                                                <td style="overflow: hidden; white-space: nowrap;" title="@LCP[i].idcolaborador">@LCP[i].idcolaborador</td>
                                                                <td style="overflow: hidden; white-space: nowrap;" title="@LCP[i].idproduto">@LCP[i].idproduto</td>
                                                                <td style="overflow: hidden; white-space: nowrap;" title="@LCP[i].descricao">@LCP[i].descricao</td>
                                                                <td style="overflow: hidden; white-space: nowrap;" title="@LCP[i].quantidade">@LCP[i].quantidade</td>
                                                                <td style="overflow: hidden; white-space: nowrap;" title="@LCP[i].peso">@LCP[i].peso</td>
                                                                <td style="overflow: hidden; white-space: nowrap;" title="@LCP[i].custo">@LCP[i].custo</td>
                                                                <td style="overflow: hidden; white-space: nowrap;" title="@LCP[i].custototal">@LCP[i].custototal</td>
                                                                <td><button class="btn btn-primary btn-sm" style="margin-left: 1rem"><i class="fas fa-pen"></i></button><button class="btn btn-danger btn-sm" style="margin-left: 0.3rem"><i class="fas fa-trash"></i></button></td>

                                                            }

                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CriarProduto">OK</button>
                </div>
            </div>
        </div>
    </div>
}







<div class="container-fluid">

    <!-- Page Heading -->
    <!-- DataTales Example -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Listagem de Encomendas</h6>
        </div>
        <div class="card-body">
            <div class="table-responsive-sm">
                <div id="dataTable_wrapper" class="dataTables_wrapper dt-bootstrap4">
                    <div class="row"><div class="col-sm-12 col-md-6"><div class="dataTables_length" id="dataTable_length"><label>Show <select name="dataTable_length" aria-controls="dataTable" class="custom-select custom-select-sm form-control form-control-sm"><option value="10">10</option><option value="25">25</option><option value="50">50</option><option value="100">100</option></select> entries</label></div></div><div class="col-sm-12 col-md-6"><div id="dataTable_filter" class="dataTables_filter"><label>Pesquisar Encomenda:<input type="search" @bind="Filter" @bind:event="oninput" class="form-control form-control-sm" placeholder="" aria-controls="dataTable"></label></div></div></div><div class="row">
                        <div class="col-sm-12">
                            <table class="table table-bordered table-hover table-sm dataTable" id="dataTable" width="100%" cellspacing="0" role="grid" aria-describedby="dataTable_info" style="width: 100%;">
                                <thead>
                                    <tr role="row"><th class="sorting_asc" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" style="width: 20px;">Data</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Position: activate to sort column ascending" style="width: 60px;">Encomenda</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Office: activate to sort column ascending" style="width: 160px;">Descrição</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Age: activate to sort column ascending" style="width: 20px;">IDCliente</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Office: activate to sort column ascending" style="width: 160px;">Nome</th><th class="sorting_asc" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" style="width: 20px;">IDProduto</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Office: activate to sort column ascending" style="width: 160px;">Contacto</th><th class="sorting" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" aria-label="Start date: activate to sort column ascending" style="width: 45px;">Localização</th><th class="sorting_asc" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" style="width: 20px;">Estado</th><th class="sorting_asc" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" style="width: 20px;">Ações</th></tr>
                                </thead>
                                <tfoot>
                                    <tr><th rowspan="1" colspan="1">Data</th><th rowspan="1" colspan="1">Encomenda</th><th rowspan="1" colspan="1">Descrição</th><th rowspan="1" colspan="1">IDCliente</th><th rowspan="1" colspan="1">Nome</th><th rowspan="1" colspan="1">IDProduto</th><th rowspan="1" colspan="1">Contacto</th><th rowspan="1" colspan="1">Loalização</th><th rowspan="1" colspan="1">Estado</th><th rowspan="1" colspan="1">Ações</th></tr>
                                </tfoot>
                                <tbody>
                                    @foreach (var encomenda in VEC)
                                    {
                                        if (!IsVisible(encomenda))
                                            continue;
                                        encomenda.idwithlinha = encomenda.idencomenda.ToString() + "/" + encomenda.linha.ToString();

                                        <tr style="height: 1em;" @ondblclick="() => AbrirModal(encomenda.idwithlinha, encomenda.idencomenda, encomenda.linha)">

                                            <td style=" overflow: hidden; white-space: nowrap; " title="@encomenda.data">@encomenda.data</td>
                                            <td class="sorting_1" style=" overflow: hidden; white-space: nowrap; " title="@encomenda.idwithlinha">@encomenda.idwithlinha</td>
                                            <td style=" overflow: hidden; white-space: nowrap; " title="@encomenda.idcliente">@encomenda.apontamentos</td>
                                            <td style=" overflow: hidden; white-space: nowrap; " title="@encomenda.nome">@encomenda.idcliente</td>
                                            <td style=" overflow: hidden; white-space: nowrap; " title="@encomenda.telefone">@encomenda.nome</td>
                                            <td style=" overflow: hidden; white-space: nowrap; " title="@encomenda.idproduto">@encomenda.idproduto</td>
                                            <td style=" overflow: hidden; white-space: nowrap; " title="@encomenda.idlocalizacao">@encomenda.telefone</td>
                                            <td style=" overflow: hidden; white-space: nowrap; " title="@encomenda.idestado">@encomenda.idlocalizacao</td>
                                            <td style=" overflow: hidden; white-space: nowrap; " title="@encomenda.colaboradoratribuido">@encomenda.colaboradoratribuido</td>

                                            <td align="center">
                                                <div class="dropdown no-arrow">
                                                    <a class="btn dropdown-toggle btn-sm" href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                        <i class="fas fa-cog fa-sm fa-fw text-gray-400"></i>
                                                    </a>
                                                    <div class="dropdown-menu dropdown-menu-right shadow animated--fade-in" aria-labelledby="dropdownMenuLink">
                                                        <div class="dropdown-header">Ações:</div>
                                                        <li class="dropdown-item" style="list-style:none" @onclick="() => AbrirModalLocalizacao(encomenda.idencomenda, encomenda.linha)"><a class="btn btn-sm btn-warning" href="#"><i class="fas fa-check">&nbsp;</i>Lançar Localização</a></li>
                                                        <li class="dropdown-item" style="list-style:none" @onclick="() => AbrirModalEstado(encomenda.idencomenda, encomenda.linha)"><a class="btn btn-sm btn-danger" href="#"><i class="fas fa-check">&nbsp;</i> Lançar Estado</a></li>
                                                    </div>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    //Lists

    List<Localizacoes> listLocalizacoes = new List<Localizacoes>();
    List<Estados> listEstados = new List<Estados>();
    List<EncomendasComputed> VEC = new List<EncomendasComputed>();

    // Object Classes
    Data.Estados estado = new Data.Estados();
    Data.Localizacoes localizacao = new Data.Localizacoes();
    bool save = false;



    Data.CabecalhoProdutos CCP = new CabecalhoProdutos();
    Data.Servicos servicos = new Servicos();
    Data.CabecalhoProdutos produtos = new CabecalhoProdutos();
    Data.CabecalhosModelos cm = new CabecalhosModelos();
    Data.Colaboradores cl = new Colaboradores();
    Data.TipoDePeca dtdp = new TipoDePeca();
    Data.TipoProduto dtp = new TipoProduto();
    Data.Produtos cp = new Data.Produtos();
    Data.Fornecedores fornecedores = new Data.Fornecedores();
    Data.ClassificacaoProdutos ecp = new Data.ClassificacaoProdutos();
    Data.CabecalhoFabrico CF = new Data.CabecalhoFabrico();
    Data.Fabrico F = new Data.Fabrico();
    Data.Unidades unidade = new Data.Unidades();
    Data.IDMaximo IDMaximo = new Data.IDMaximo();
    Data.HistoricoStock hStock = new Data.HistoricoStock();
    Data.Produtos RProduto = new Data.Produtos();
    Data.Encomendas detalhencomenda = new Data.Encomendas();
    Data.CabecalhoProdutos UProduto = new Data.CabecalhoProdutos();

    // Declaration of needed lists
    List<Unidades> listaUnidades = new List<Unidades>();
    List<ClassificacaoProdutos> listaClassificacaoProdutos = new List<ClassificacaoProdutos>();
    List<Fornecedores> listaFornecedores = new List<Fornecedores>();
    List<Servicos> ListaServicos = new List<Servicos>();
    List<TipoDePeca> listaTipoDePecas = new List<TipoDePeca>();
    List<TipoProduto> listaTipoProdutos = new List<TipoProduto>();
    List<Data.Produtos> listaProdutos = new List<Produtos>();
    List<CabecalhosModelos> listacabecalhoModeloControllers = new List<CabecalhosModelos>();
    List<Colaboradores> colaboradores = new List<Colaboradores>();
    List<CabecalhoProdutos> listaCabecalhoProduto = new List<CabecalhoProdutos>();

    //For input values
    List<Data.Produtos> LCP = new List<Produtos>();
    List<Data.Fabrico> LCFP = new List<Fabrico>();




    string idencomendaselecionada;
    bool ProdutoNovo = true;
    public string Filter { get; set; }
    bool Readonly;
    bool showModal = false;
    bool showModal2 = false;
    bool showModal3 = false;
    int EncomendaID = 0;
    int EncomendaLinha = 0;
    int i;
    int iencomenda;







    public async Task CriarProduto()
    {
        if (LCP.Count != 0)
        {

            //Vai buscar o utilizador que está logado
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            CCP.idmodelo = cm.idmodelo;
            CCP.idclassificação = ecp.IDClassificacao;
            CCP.idunidade = unidade.idunidade;
            CCP.idtipodeproduto = dtp.idtipoproduto;
            CCP.idtipodepeca = dtdp.idpeca;
            CCP.idfornecedor = fornecedores.idfornecedor;


            CCP.stockantigo = 0;


            if (CCP.updatestock.HasValue)
            {
                CCP.stocktotal = CCP.stock.GetValueOrDefault() + CCP.updatestock.Value;
            }
            else if (CCP.peso.HasValue)
            {
                CCP.stocktotal = CCP.stock.GetValueOrDefault() + CCP.peso.Value;
            }
            else
            {
                js.InvokeVoidAsync("alert", "Impossivel adicionar stock ao produto, o produto foi composto sem stock!");

            }

            if (CCP.stocktotal.HasValue)
            {
                CCP.stock = CCP.stocktotal.Value;
            }

            if (CCP.preco.HasValue)
            {
                if (CCP.margem.HasValue)
                {
                    CCP.preco = CCP.preco * CCP.margem;
                    CCP.pvp = CCP.preco * 1.23;
                }
                else
                {
                    CCP.pvp = CCP.preco * 1.23;
                }
            }

            //if (CCP.peso.HasValue && CCP.cotacao.HasValue && CCP.updatestock.HasValue)
            //{
            //    CCP.preco = (CCP.peso.Value * CCP.cotacao.Value) + CCP.feitiopeca;
            //    CCP.custototal = CCP.preco * CCP.updatestock;

            //}
            //else if (CCP.peso.HasValue && CCP.cotacao.HasValue && !CCP.updatestock.HasValue)
            //{
            //    CCP.preco = (CCP.peso.Value * CCP.cotacao.Value) + CCP.feitiopeca;
            //    CCP.custototal = CCP.preco;
            //}
            //else if (CCP.updatestock.HasValue)
            //{
            //    CCP.preco = CCP.feitiopeca;
            //    CCP.custototal = CCP.preco * CCP.updatestock;
            //}
            //else
            //{
            //    js.InvokeVoidAsync("alert", "Impossivel fazer o preço, o produto vai ser criado sem preço");
            //}




            hStock.tipocomponente = "FAB";
            hStock.tipo = "Entrada";
            hStock.stockinicial = 0;

            if (CCP.updatestock.HasValue)
            {
                hStock.stockadicionado = CCP.updatestock.Value;
            }
            if (CCP.stock.HasValue)
            {
                hStock.stockfinal = CCP.stock.Value;
            }
            hStock.datacriacao = DateTime.Now.ToString("dd/MM/yyyy H:mm");

            var resultado = CAPC.Post(CCP);
            await Task.Delay(1000);

            CF.idproduto = resultado.idproduto;
            CF.idencomenda = idencomendaselecionada;
            EC.UpdateProduto(EncomendaID, EncomendaLinha, resultado.idproduto);
            var resultado2 = CFC.Post(CF);
            hStock.idcomponente = resultado2.idfabrico.ToString();
            hStock.idprodutoalterado = resultado.idproduto;
            hStockC.Post(hStock);
            hStock = new HistoricoStock();
            await Task.Delay(1000);


            for (int i = 0; i < LCP.Count; i++)
            {
                LCP[i].linha = i + 1;
                LCP[i].idproduto = resultado.idproduto;
                if (LCP[i].idprodutos != 0)
                {
                    if(LCP[i].idprodutos.HasValue)
                    {
                        UProduto = CAPC.Get(LCP[i].idprodutos.Value);
                    }
                    if (UProduto.stock.HasValue)
                    {
                        hStock.stockinicial = UProduto.stock.Value;
                    }
                    UProduto.stock = UProduto.stock - LCP[i].quantidade;
                    hStock.stockadicionado = LCP[i].quantidade;
                    CAPC.Put(UProduto.idproduto, UProduto);
                    // Adds to history
                    hStock.tipocomponente = "FAB";
                    hStock.idcomponente = resultado2.idfabrico.ToString();
                    hStock.tipo = "Saida";
                    if (LCP[i].idprodutos.HasValue)
                    {
                        hStock.idprodutoalterado = LCP[i].idprodutos.Value;
                    }
                    hStock.datacriacao = DateTime.Now.ToString("dd/MM/yyyy H:mm");
                    hStock.referenciasaida = resultado.idproduto.ToString() + "-" + resultado.descricao;
                    var resultado4 = hStockC.Post(hStock);
                    hStock = new HistoricoStock();
                    if (UProduto.stock.HasValue)
                    {
                        hStock.stockfinal = UProduto.stock.Value;
                    }
                    UProduto = new CabecalhoProdutos();

                }
                LCFP[i].idfabrico = resultado2.idfabrico;



                var resultado3 = PC.Post(LCP[i]);

                LCFP[i].idfabrico = resultado2.idfabrico;
                var resultado5 = FBCC.Post(LCFP[i]);

                if (resultado.idproduto != 0 && resultado2.idfabrico != 0)
                {
                    js.InvokeVoidAsync("alert", "Fabrico criado com sucesso!");
                }

            }

            LCFP = new List<Fabrico>();
            LCP = new List<Produtos>();
            CCP = new CabecalhoProdutos();
            hStock = new HistoricoStock();
            produtos = new CabecalhoProdutos();
            cp = new Produtos();
            CF = new CabecalhoFabrico();
            cm = new CabecalhosModelos();
            servicos = new Servicos();
            cl = new Colaboradores();
            ecp = new ClassificacaoProdutos();
            unidade = new Unidades();
            dtdp = new TipoDePeca();
            dtp = new TipoProduto();
            fornecedores = new Fornecedores();

        }
        else
        {
            await js.InvokeVoidAsync("alert", "Impossível criar a encomenda, por favor, insira bem os dados da encomenda!");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        VEC = EC.GetWithInner();

        listaFornecedores = FC.GetAll();
        listacabecalhoModeloControllers = CMC.GetAll();
        listaClassificacaoProdutos = CPC.GetAll();
        listaUnidades = UC.GetAll();
        listaTipoDePecas = TPC.GetAll();
        listaTipoProdutos = TPRC.GetAll();
        ListaServicos = SC.GetAll();
        listaCabecalhoProduto = CAPC.GetAll();
        colaboradores = colaboradoresController.GetAll();
        // Initial Values in CFabrico Page
        var res = CAPC.GetMaxID();
        JsRuntime.InvokeVoidAsync("console.log", res);
        CF.datacriacao = DateTime.Now.ToShortDateString();
    }

    public bool IsVisible(EncomendasComputed encomendas)
    {
        if (string.IsNullOrEmpty(Filter))
            return true;

        if (encomendas.nome.Contains(Filter) || encomendas.telefone.ToString().Contains(Filter) || encomendas.idwithlinha.ToString().Contains(Filter) || encomendas.data.ToString().Contains(Filter))
            return true;

        return false;
    }

    public bool IsVisibleProdutos(CabecalhoProdutos produtos)
    {
        if (string.IsNullOrEmpty(Filter))
            return true;

        if (produtos.idproduto.Equals(Filter) || produtos.descricao.ToString().Contains(Filter) || produtos.apontamentos.ToString().Contains(Filter))
            return true;

        return false;
    }

    private async Task<IEnumerable<Localizacoes>> ProcurarLocalizacao(string searchText)
    {
        return await Task.FromResult(listLocalizacoes.Where(h => h.idlocalizacao.ToString().ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<Estados>> ProcurarEstado(string searchText)
    {
        return await Task.FromResult(listEstados.Where(h => h.idestados.ToString().ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
    }


    public async Task AbrirModalLocalizacao(int id, int linha)
    {
        listLocalizacoes = LocalizacaoC.GetAll();
        EncomendaID = id;
        EncomendaLinha = linha;
        showModal = true;
    }

    public async Task AbrirModalEstado(int id, int linha)
    {
        listEstados = EstadosC.GetAll();
        EncomendaID = id;
        EncomendaLinha = linha;
        showModal2 = true;

    }

    public async Task AbrirModal(string id, int idencomenda, int linha)
    {
        idencomendaselecionada = id;

        detalhencomenda = EC.GetAllQuery(idencomenda, linha);

        showModal3 = true;
    }



    public async Task AdicionarComposto()
    {
        Data.Fabrico fabricocomposto = new Data.Fabrico();

        if (servicos.idservico != 0)
        {
            i++;
            cp.linha = i;
            cp.custo = cl.valor;
            cp.idcolaborador = cl.idcolaborador;
            cp.idservico = servicos.idservico;
            cp.descricao = servicos.descricao;
            cp.datacriacao = DateTime.Now.ToString();
            if (servicos.custo != 0)
            {
                cp.custototal = cp.custo * cp.quantidade;
                CCP.preco += cp.quantidade * produtos.preco;
            }
            fabricocomposto.linha = i;
            fabricocomposto.custo = cl.valor;
            fabricocomposto.idservico = servicos.idservico;
            fabricocomposto.descricao = servicos.descricao;
            fabricocomposto.customedio = cp.customedio;
            fabricocomposto.custototal = cp.custototal;
            fabricocomposto.datacriacao = DateTime.Now.ToShortDateString();
            fabricocomposto.peso = cp.peso;
            fabricocomposto.quantidade = cp.quantidade;


            LCP.Add(cp);
            LCFP.Add(fabricocomposto);

            cm = new CabecalhosModelos();
            servicos = new Servicos();
            produtos = new CabecalhoProdutos();
            cl = new Colaboradores();
            cp = new Produtos();
            fabricocomposto = new Fabrico();

        }
        else if (produtos.idproduto != 0)
        {
            i++;
            cp.linha = i;
            cp.custo = cl.valor;
            cp.idcolaborador = cl.idcolaborador;
            cp.idprodutos = produtos.idproduto;
            cp.descricao = produtos.descricao;
            cp.datacriacao = DateTime.Now.ToString();
            if (produtos.peso.HasValue)
            {
                cp.peso = produtos.peso.Value;

            }
            if (produtos.preco.HasValue)
            {
                cp.custo = produtos.preco.Value;
                cp.custototal = cp.custo * cp.quantidade;
                CCP.preco += cp.custototal;
            }
            fabricocomposto.linha = i;
            fabricocomposto.custo = cl.valor;
            fabricocomposto.idprodutos = produtos.idproduto;
            fabricocomposto.descricao = produtos.descricao;
            fabricocomposto.customedio = cp.customedio;
            fabricocomposto.custototal = cp.custototal;
            fabricocomposto.datacriacao = DateTime.Now.ToShortDateString();
            fabricocomposto.peso = cp.peso;
            fabricocomposto.quantidade = cp.quantidade;
            LCP.Add(cp);
            LCFP.Add(fabricocomposto);

            cm = new CabecalhosModelos();
            servicos = new Servicos();
            produtos = new CabecalhoProdutos();
            cl = new Colaboradores();
            cp = new Produtos();
            fabricocomposto = new Fabrico();

        }
        else
        {
            await js.InvokeVoidAsync("alert", "Impossivél adicionar, por favor verifique os campos!");
        }
    }

    public async Task LoadData(int i)
    {
        iencomenda = i;
        cp = LCP[i];
        if (cp.idprodutos.HasValue)
        {
            produtos = CAPC.Get(cp.idprodutos.Value);
        }
        else
        {
            servicos = SC.Get(cp.idservico.Value);
        }
        save = true;
    }


    public async Task LancarLocalizacao()
    {
        var resultado = EC.LancarLocalizacoes(EncomendaID, EncomendaLinha, localizacao.descricao);
        if (resultado != null)
        {
            await js.InvokeVoidAsync("alert", "Localizacao lancado com sucesso");
        }
        else
        {
            await js.InvokeVoidAsync("alert", "Localizacao nao foi lancada");
        }
        EncomendaID = new int();
        showModal = false;
    }

    public async Task LancarEstado()
    {
        var resultado = EC.LancarEstado(EncomendaID, EncomendaLinha, estado.descricao);
        if (resultado != null)
        {
            await js.InvokeVoidAsync("alert", "Localizacao lancado com sucesso");
        }
        else
        {
            await js.InvokeVoidAsync("alert", "Localizacao nao foi lancada");
        }
        EncomendaID = new int();
        showModal2 = false;
    }

    public async Task EditarComposto()
    {
        Data.Fabrico fabricocomposto = new Data.Fabrico();

        if (servicos.idservico != 0)
        {
            i++;
            cp.linha = i;
            cp.custo = cl.valor;
            cp.idcolaborador = cl.idcolaborador;
            cp.idservico = servicos.idservico;
            cp.descricao = servicos.descricao;
            cp.datacriacao = DateTime.Now.ToString();
            if (servicos.custo != 0)
            {
                cp.custo = servicos.custo;
                cp.custototal = cp.custo * cp.quantidade;
                CCP.preco += cp.quantidade * produtos.preco;
            }
            fabricocomposto.linha = i;
            fabricocomposto.custo = cl.valor;
            fabricocomposto.idservico = servicos.idservico;
            fabricocomposto.descricao = servicos.descricao;
            fabricocomposto.customedio = cp.customedio;
            fabricocomposto.custototal = cp.custototal;
            fabricocomposto.datacriacao = DateTime.Now.ToShortDateString();
            fabricocomposto.peso = cp.peso;
            fabricocomposto.quantidade = cp.quantidade;

            LCP.RemoveAt(iencomenda);
            LCP.Insert(iencomenda, cp);

            LCFP.RemoveAt(iencomenda);
            LCFP.Insert(iencomenda, fabricocomposto);

            cm = new CabecalhosModelos();
            servicos = new Servicos();
            produtos = new CabecalhoProdutos();
            cl = new Colaboradores();
            cp = new Produtos();
            fabricocomposto = new Fabrico();

        }
        else if (produtos.idproduto != 0)
        {
            i++;
            cp.linha = i;
            cp.custo = cl.valor;
            cp.idcolaborador = cl.idcolaborador;
            cp.idprodutos = produtos.idproduto;
            cp.descricao = produtos.descricao;
            cp.datacriacao = DateTime.Now.ToString();
            if (produtos.peso.HasValue)
            {
                cp.peso = produtos.peso.Value;

            }
            if (produtos.preco.HasValue)
            {
                cp.custo = produtos.preco.Value;
                cp.custototal = cp.custo * cp.quantidade;
                CCP.preco += cp.custototal;
            }
            fabricocomposto.linha = i;
            fabricocomposto.custo = cl.valor;
            fabricocomposto.idprodutos = produtos.idproduto;
            fabricocomposto.descricao = produtos.descricao;
            fabricocomposto.customedio = cp.customedio;
            fabricocomposto.custototal = cp.custototal;
            fabricocomposto.datacriacao = DateTime.Now.ToShortDateString();
            fabricocomposto.peso = cp.peso;
            fabricocomposto.quantidade = cp.quantidade;

            LCP.RemoveAt(iencomenda);
            LCP.Insert(iencomenda, cp);

            LCFP.RemoveAt(iencomenda);
            LCFP.Insert(iencomenda, fabricocomposto);

            cm = new CabecalhosModelos();
            servicos = new Servicos();
            produtos = new CabecalhoProdutos();
            cl = new Colaboradores();
            cp = new Produtos();
            fabricocomposto = new Fabrico();

        }
        else
        {
            await js.InvokeVoidAsync("alert", "Impossivél adicionar, por favor verifique os campos!");
        }
    }

    public async Task ApagarItemLista(int i)
    {
        LCP.RemoveAt(i);
    }

    public async Task ModalCancel()
    {
        showModal = false;
    }

    public async Task ModalCancel2()
    {
        showModal2 = false;
    }

    public async Task ModalCancel3()
    {
        showModal3 = false;
    }

    private async Task<IEnumerable<Unidades>> ProcurarUnidades(string searchText)
    {
        return await Task.FromResult(listaUnidades.Where(h => h.indice.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<ClassificacaoProdutos>> ProcurarClassificação(string searchText)
    {
        return await Task.FromResult(listaClassificacaoProdutos.Where(h => h.codigoat.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<TipoDePeca>> ProcurarPecas(string searchText)
    {
        return await Task.FromResult(listaTipoDePecas.Where(h => h.codigo.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower()) || h.idpeca.ToString().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<Fornecedores>> ProcurarFornecedores(string searchText)
    {
        return await Task.FromResult(listaFornecedores.Where(h => h.codigo.ToLower().Contains(searchText.ToLower()) || h.nome.ToLower().Contains(searchText.ToLower()) || h.idfornecedor.ToString().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<TipoProduto>> ProcurarTipoProdutos(string searchText)
    {
        return await Task.FromResult(listaTipoProdutos.Where(h => h.codigo.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<CabecalhoProdutos>> ProcurarProdutos(string searchText)
    {
        return await Task.FromResult(listaCabecalhoProduto.Where(h => h.descricao.ToLower().Contains(searchText.ToLower()) || h.idproduto.Equals(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<Colaboradores>> ProcurarColaboradores(string searchText)
    {
        return await Task.FromResult(colaboradores.Where(h => h.codigo.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<Servicos>> ProcurarServicos(string searchText)
    {
        return await Task.FromResult(ListaServicos.Where(h => h.codigo.ToLower().Contains(searchText.ToLower()) || h.descricao.ToLower().Contains(searchText.ToLower())).ToList());
    }


}
